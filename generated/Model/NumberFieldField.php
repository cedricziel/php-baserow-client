<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class NumberFieldField extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * @var int
     */
    protected $tableId;
    /**
     * @var string
     */
    protected $name;
    /**
     * Lowest first.
     *
     * @var int
     */
    protected $order;
    /**
     * The type of the related field.
     *
     * @var string
     */
    protected $type;
    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     *
     * @var bool
     */
    protected $primary;
    /**
     * Indicates whether the field is a read only field. If true, it's not possible to update the cell value.
     *
     * @var bool
     */
    protected $readOnly;
    /**
     * Field description.
     *
     * @var string|null
     */
    protected $description;
    /**
     * The amount of digits allowed after the point.
     *
     * `0` - 1
     * `1` - 1.0
     * `2` - 1.00
     * `3` - 1.000
     * `4` - 1.0000
     * `5` - 1.00000
     * `6` - 1.000000
     * `7` - 1.0000000
     * `8` - 1.00000000
     * `9` - 1.000000000
     * `10` - 1.0000000000
     *
     * @var int
     */
    protected $numberDecimalPlaces;
    /**
     * Indicates if negative values are allowed.
     *
     * @var bool
     */
    protected $numberNegative;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getTableId(): int
    {
        return $this->tableId;
    }

    public function setTableId(int $tableId): self
    {
        $this->initialized['tableId'] = true;
        $this->tableId = $tableId;

        return $this;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Lowest first.
     */
    public function getOrder(): int
    {
        return $this->order;
    }

    /**
     * Lowest first.
     */
    public function setOrder(int $order): self
    {
        $this->initialized['order'] = true;
        $this->order = $order;

        return $this;
    }

    /**
     * The type of the related field.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The type of the related field.
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     */
    public function getPrimary(): bool
    {
        return $this->primary;
    }

    /**
     * Indicates if the field is a primary field. If `true` the field cannot be deleted and the value should represent the whole row.
     */
    public function setPrimary(bool $primary): self
    {
        $this->initialized['primary'] = true;
        $this->primary = $primary;

        return $this;
    }

    /**
     * Indicates whether the field is a read only field. If true, it's not possible to update the cell value.
     */
    public function getReadOnly(): bool
    {
        return $this->readOnly;
    }

    /**
     * Indicates whether the field is a read only field. If true, it's not possible to update the cell value.
     */
    public function setReadOnly(bool $readOnly): self
    {
        $this->initialized['readOnly'] = true;
        $this->readOnly = $readOnly;

        return $this;
    }

    /**
     * Field description.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Field description.
     */
    public function setDescription(?string $description): self
    {
        $this->initialized['description'] = true;
        $this->description = $description;

        return $this;
    }

    /**
     * The amount of digits allowed after the point.
     *
     * `0` - 1
     * `1` - 1.0
     * `2` - 1.00
     * `3` - 1.000
     * `4` - 1.0000
     * `5` - 1.00000
     * `6` - 1.000000
     * `7` - 1.0000000
     * `8` - 1.00000000
     * `9` - 1.000000000
     * `10` - 1.0000000000
     */
    public function getNumberDecimalPlaces(): int
    {
        return $this->numberDecimalPlaces;
    }

    /**
     * The amount of digits allowed after the point.
     *
     * `0` - 1
     * `1` - 1.0
     * `2` - 1.00
     * `3` - 1.000
     * `4` - 1.0000
     * `5` - 1.00000
     * `6` - 1.000000
     * `7` - 1.0000000
     * `8` - 1.00000000
     * `9` - 1.000000000
     * `10` - 1.0000000000
     */
    public function setNumberDecimalPlaces(int $numberDecimalPlaces): self
    {
        $this->initialized['numberDecimalPlaces'] = true;
        $this->numberDecimalPlaces = $numberDecimalPlaces;

        return $this;
    }

    /**
     * Indicates if negative values are allowed.
     */
    public function getNumberNegative(): bool
    {
        return $this->numberNegative;
    }

    /**
     * Indicates if negative values are allowed.
     */
    public function setNumberNegative(bool $numberNegative): self
    {
        $this->initialized['numberNegative'] = true;
        $this->numberNegative = $numberNegative;

        return $this;
    }
}
