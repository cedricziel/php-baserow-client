<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class UserAdminResponse extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * @var string
     */
    protected $username;
    /**
     * @var string
     */
    protected $name;
    /**
     * @var list<UserAdminGroups>
     */
    protected $groups;
    /**
     * @var list<UserAdminGroups>
     */
    protected $workspaces;
    /**
     * @var \DateTime|null
     */
    protected $lastLogin;
    /**
     * @var \DateTime
     */
    protected $dateJoined;
    /**
     * Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
     *
     * @var bool
     */
    protected $isActive;
    /**
     * Designates whether this user is an admin and has access to all workspaces and Baserow's admin areas.
     *
     * @var bool
     */
    protected $isStaff;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getUsername(): string
    {
        return $this->username;
    }

    public function setUsername(string $username): self
    {
        $this->initialized['username'] = true;
        $this->username = $username;

        return $this;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * @return list<UserAdminGroups>
     */
    public function getGroups(): array
    {
        return $this->groups;
    }

    /**
     * @param list<UserAdminGroups> $groups
     */
    public function setGroups(array $groups): self
    {
        $this->initialized['groups'] = true;
        $this->groups = $groups;

        return $this;
    }

    /**
     * @return list<UserAdminGroups>
     */
    public function getWorkspaces(): array
    {
        return $this->workspaces;
    }

    /**
     * @param list<UserAdminGroups> $workspaces
     */
    public function setWorkspaces(array $workspaces): self
    {
        $this->initialized['workspaces'] = true;
        $this->workspaces = $workspaces;

        return $this;
    }

    public function getLastLogin(): ?\DateTime
    {
        return $this->lastLogin;
    }

    public function setLastLogin(?\DateTime $lastLogin): self
    {
        $this->initialized['lastLogin'] = true;
        $this->lastLogin = $lastLogin;

        return $this;
    }

    public function getDateJoined(): \DateTime
    {
        return $this->dateJoined;
    }

    public function setDateJoined(\DateTime $dateJoined): self
    {
        $this->initialized['dateJoined'] = true;
        $this->dateJoined = $dateJoined;

        return $this;
    }

    /**
     * Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
     */
    public function getIsActive(): bool
    {
        return $this->isActive;
    }

    /**
     * Designates whether this user should be treated as active. Set this to false instead of deleting accounts.
     */
    public function setIsActive(bool $isActive): self
    {
        $this->initialized['isActive'] = true;
        $this->isActive = $isActive;

        return $this;
    }

    /**
     * Designates whether this user is an admin and has access to all workspaces and Baserow's admin areas.
     */
    public function getIsStaff(): bool
    {
        return $this->isStaff;
    }

    /**
     * Designates whether this user is an admin and has access to all workspaces and Baserow's admin areas.
     */
    public function setIsStaff(bool $isStaff): self
    {
        $this->initialized['isStaff'] = true;
        $this->isStaff = $isStaff;

        return $this;
    }
}
