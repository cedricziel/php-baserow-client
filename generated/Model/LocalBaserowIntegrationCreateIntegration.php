<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class LocalBaserowIntegrationCreateIntegration extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * If provided, creates the integration before the integration with the given id.
     *
     * @var int
     */
    protected $beforeId;
    /**
     * The type of the integration.
     * `local_baserow` - local_baserow.
     *
     * @var string
     */
    protected $type;
    /**
     * @var string
     */
    protected $name;
    /**
     * @var LocalBaserowIntegrationCreateIntegrationContextData
     */
    protected $contextData;
    /**
     * @var LocalBaserowIntegrationCreateIntegrationAuthorizedUser
     */
    protected $authorizedUser;

    /**
     * If provided, creates the integration before the integration with the given id.
     */
    public function getBeforeId(): int
    {
        return $this->beforeId;
    }

    /**
     * If provided, creates the integration before the integration with the given id.
     */
    public function setBeforeId(int $beforeId): self
    {
        $this->initialized['beforeId'] = true;
        $this->beforeId = $beforeId;

        return $this;
    }

    /**
     * The type of the integration.
     * `local_baserow` - local_baserow.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The type of the integration.
     * `local_baserow` - local_baserow.
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getContextData(): LocalBaserowIntegrationCreateIntegrationContextData
    {
        return $this->contextData;
    }

    public function setContextData(LocalBaserowIntegrationCreateIntegrationContextData $contextData): self
    {
        $this->initialized['contextData'] = true;
        $this->contextData = $contextData;

        return $this;
    }

    public function getAuthorizedUser(): LocalBaserowIntegrationCreateIntegrationAuthorizedUser
    {
        return $this->authorizedUser;
    }

    public function setAuthorizedUser(LocalBaserowIntegrationCreateIntegrationAuthorizedUser $authorizedUser): self
    {
        $this->initialized['authorizedUser'] = true;
        $this->authorizedUser = $authorizedUser;

        return $this;
    }
}
