<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class CreateRoleAssignment extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The subject ID. A subject is an actor that can do operations.
     *
     * @var int
     */
    protected $subjectId;
    /**
     * The subject type.
     *
     * `auth.User` - auth.User
     * `anonymous` - anonymous
     * `user_source.user` - user_source.user
     * `core.Token` - core.Token
     * `baserow_enterprise.Team` - baserow_enterprise.Team
     *
     * @var string
     */
    protected $subjectType;
    /**
     * The uid of the role you want to assign to the user or team in the given workspace. You can omit this property if you want to remove the role.
     *
     * @var string|null
     */
    protected $role;
    /**
     * The ID of the scope object. The scope object limit the role assignment to this scope and all its descendants.
     *
     * @var int
     */
    protected $scopeId;
    /**
     * The scope object type.
     *
     * `core` - core
     * `application` - application
     * `workspace` - workspace
     * `workspace_invitation` - workspace_invitation
     * `snapshot` - snapshot
     * `workspace_user` - workspace_user
     * `integration` - integration
     * `user_source` - user_source
     * `database` - database
     * `database_table` - database_table
     * `database_field` - database_field
     * `database_view` - database_view
     * `database_view_decoration` - database_view_decoration
     * `database_view_sort` - database_view_sort
     * `database_view_group` - database_view_group
     * `database_view_filter` - database_view_filter
     * `database_view_filter_group` - database_view_filter_group
     * `token` - token
     * `builder` - builder
     * `builder_page` - builder_page
     * `builder_element` - builder_element
     * `builder_domain` - builder_domain
     * `builder_data_source` - builder_data_source
     * `builder_workflow_action` - builder_workflow_action
     * `team` - team
     * `team_subject` - team_subject
     * `license` - license
     *
     * @var string
     */
    protected $scopeType;

    /**
     * The subject ID. A subject is an actor that can do operations.
     */
    public function getSubjectId(): int
    {
        return $this->subjectId;
    }

    /**
     * The subject ID. A subject is an actor that can do operations.
     */
    public function setSubjectId(int $subjectId): self
    {
        $this->initialized['subjectId'] = true;
        $this->subjectId = $subjectId;

        return $this;
    }

    /**
     * The subject type.
     *
     * `auth.User` - auth.User
     * `anonymous` - anonymous
     * `user_source.user` - user_source.user
     * `core.Token` - core.Token
     * `baserow_enterprise.Team` - baserow_enterprise.Team
     */
    public function getSubjectType(): string
    {
        return $this->subjectType;
    }

    /**
     * The subject type.
     *
     * `auth.User` - auth.User
     * `anonymous` - anonymous
     * `user_source.user` - user_source.user
     * `core.Token` - core.Token
     * `baserow_enterprise.Team` - baserow_enterprise.Team
     */
    public function setSubjectType(string $subjectType): self
    {
        $this->initialized['subjectType'] = true;
        $this->subjectType = $subjectType;

        return $this;
    }

    /**
     * The uid of the role you want to assign to the user or team in the given workspace. You can omit this property if you want to remove the role.
     */
    public function getRole(): ?string
    {
        return $this->role;
    }

    /**
     * The uid of the role you want to assign to the user or team in the given workspace. You can omit this property if you want to remove the role.
     */
    public function setRole(?string $role): self
    {
        $this->initialized['role'] = true;
        $this->role = $role;

        return $this;
    }

    /**
     * The ID of the scope object. The scope object limit the role assignment to this scope and all its descendants.
     */
    public function getScopeId(): int
    {
        return $this->scopeId;
    }

    /**
     * The ID of the scope object. The scope object limit the role assignment to this scope and all its descendants.
     */
    public function setScopeId(int $scopeId): self
    {
        $this->initialized['scopeId'] = true;
        $this->scopeId = $scopeId;

        return $this;
    }

    /**
     * The scope object type.
     *
     * `core` - core
     * `application` - application
     * `workspace` - workspace
     * `workspace_invitation` - workspace_invitation
     * `snapshot` - snapshot
     * `workspace_user` - workspace_user
     * `integration` - integration
     * `user_source` - user_source
     * `database` - database
     * `database_table` - database_table
     * `database_field` - database_field
     * `database_view` - database_view
     * `database_view_decoration` - database_view_decoration
     * `database_view_sort` - database_view_sort
     * `database_view_group` - database_view_group
     * `database_view_filter` - database_view_filter
     * `database_view_filter_group` - database_view_filter_group
     * `token` - token
     * `builder` - builder
     * `builder_page` - builder_page
     * `builder_element` - builder_element
     * `builder_domain` - builder_domain
     * `builder_data_source` - builder_data_source
     * `builder_workflow_action` - builder_workflow_action
     * `team` - team
     * `team_subject` - team_subject
     * `license` - license
     */
    public function getScopeType(): string
    {
        return $this->scopeType;
    }

    /**
     * The scope object type.
     *
     * `core` - core
     * `application` - application
     * `workspace` - workspace
     * `workspace_invitation` - workspace_invitation
     * `snapshot` - snapshot
     * `workspace_user` - workspace_user
     * `integration` - integration
     * `user_source` - user_source
     * `database` - database
     * `database_table` - database_table
     * `database_field` - database_field
     * `database_view` - database_view
     * `database_view_decoration` - database_view_decoration
     * `database_view_sort` - database_view_sort
     * `database_view_group` - database_view_group
     * `database_view_filter` - database_view_filter
     * `database_view_filter_group` - database_view_filter_group
     * `token` - token
     * `builder` - builder
     * `builder_page` - builder_page
     * `builder_element` - builder_element
     * `builder_domain` - builder_domain
     * `builder_data_source` - builder_data_source
     * `builder_workflow_action` - builder_workflow_action
     * `team` - team
     * `team_subject` - team_subject
     * `license` - license
     */
    public function setScopeType(string $scopeType): self
    {
        $this->initialized['scopeType'] = true;
        $this->scopeType = $scopeType;

        return $this;
    }
}
