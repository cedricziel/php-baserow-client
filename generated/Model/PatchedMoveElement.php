<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class PatchedMoveElement extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * If provided, the element is moved before the element with this Id. Otherwise the element is placed at the end of the page.
     *
     * @var int|null
     */
    protected $beforeId;
    /**
     * If provided, the element is moved as a child of the element with the given id.
     *
     * @var int|null
     */
    protected $parentElementId;
    /**
     * The place in the container.
     *
     * @var string|null
     */
    protected $placeInContainer;

    /**
     * If provided, the element is moved before the element with this Id. Otherwise the element is placed at the end of the page.
     */
    public function getBeforeId(): ?int
    {
        return $this->beforeId;
    }

    /**
     * If provided, the element is moved before the element with this Id. Otherwise the element is placed at the end of the page.
     */
    public function setBeforeId(?int $beforeId): self
    {
        $this->initialized['beforeId'] = true;
        $this->beforeId = $beforeId;

        return $this;
    }

    /**
     * If provided, the element is moved as a child of the element with the given id.
     */
    public function getParentElementId(): ?int
    {
        return $this->parentElementId;
    }

    /**
     * If provided, the element is moved as a child of the element with the given id.
     */
    public function setParentElementId(?int $parentElementId): self
    {
        $this->initialized['parentElementId'] = true;
        $this->parentElementId = $parentElementId;

        return $this;
    }

    /**
     * The place in the container.
     */
    public function getPlaceInContainer(): ?string
    {
        return $this->placeInContainer;
    }

    /**
     * The place in the container.
     */
    public function setPlaceInContainer(?string $placeInContainer): self
    {
        $this->initialized['placeInContainer'] = true;
        $this->placeInContainer = $placeInContainer;

        return $this;
    }
}
