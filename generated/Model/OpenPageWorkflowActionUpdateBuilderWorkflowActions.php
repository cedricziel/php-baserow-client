<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class OpenPageWorkflowActionUpdateBuilderWorkflowActions extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The type of the workflow action.
     *
     * `notification` - notification
     * `open_page` - open_page
     * `create_row` - create_row
     * `update_row` - update_row
     * `logout` - logout
     * `refresh_data_source` - refresh_data_source
     *
     * @var string
     */
    protected $type;
    /**
     * The navigation type.
     *
     * `page` - Page
     * `custom` - Custom
     *
     * @var string
     */
    protected $navigationType;
    /**
     * ('Destination page id for this link. If null then we use the navigate_to_url property instead.',).
     *
     * @var int|null
     */
    protected $navigateToPageId;
    /**
     * If no page is selected, this indicate the destination of the link.
     *
     * @var string
     */
    protected $navigateToUrl = '';
    /**
     * The parameters for each parameters of the selected page if any.
     *
     * @var list<PageParameterValue>
     */
    protected $pageParameters;
    /**
     * The target of the link when we click on it.
     *
     * `self` - Self
     * `blank` - Blank
     *
     * @var string
     */
    protected $target;
    /**
     * The url of the page to open.
     *
     * @var string
     */
    protected $url = '';

    /**
     * The type of the workflow action.
     *
     * `notification` - notification
     * `open_page` - open_page
     * `create_row` - create_row
     * `update_row` - update_row
     * `logout` - logout
     * `refresh_data_source` - refresh_data_source
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The type of the workflow action.
     *
     * `notification` - notification
     * `open_page` - open_page
     * `create_row` - create_row
     * `update_row` - update_row
     * `logout` - logout
     * `refresh_data_source` - refresh_data_source
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The navigation type.
     *
     * `page` - Page
     * `custom` - Custom
     */
    public function getNavigationType(): string
    {
        return $this->navigationType;
    }

    /**
     * The navigation type.
     *
     * `page` - Page
     * `custom` - Custom
     */
    public function setNavigationType(string $navigationType): self
    {
        $this->initialized['navigationType'] = true;
        $this->navigationType = $navigationType;

        return $this;
    }

    /**
     * ('Destination page id for this link. If null then we use the navigate_to_url property instead.',).
     */
    public function getNavigateToPageId(): ?int
    {
        return $this->navigateToPageId;
    }

    /**
     * ('Destination page id for this link. If null then we use the navigate_to_url property instead.',).
     */
    public function setNavigateToPageId(?int $navigateToPageId): self
    {
        $this->initialized['navigateToPageId'] = true;
        $this->navigateToPageId = $navigateToPageId;

        return $this;
    }

    /**
     * If no page is selected, this indicate the destination of the link.
     */
    public function getNavigateToUrl(): string
    {
        return $this->navigateToUrl;
    }

    /**
     * If no page is selected, this indicate the destination of the link.
     */
    public function setNavigateToUrl(string $navigateToUrl): self
    {
        $this->initialized['navigateToUrl'] = true;
        $this->navigateToUrl = $navigateToUrl;

        return $this;
    }

    /**
     * The parameters for each parameters of the selected page if any.
     *
     * @return list<PageParameterValue>
     */
    public function getPageParameters(): array
    {
        return $this->pageParameters;
    }

    /**
     * The parameters for each parameters of the selected page if any.
     *
     * @param list<PageParameterValue> $pageParameters
     */
    public function setPageParameters(array $pageParameters): self
    {
        $this->initialized['pageParameters'] = true;
        $this->pageParameters = $pageParameters;

        return $this;
    }

    /**
     * The target of the link when we click on it.
     *
     * `self` - Self
     * `blank` - Blank
     */
    public function getTarget(): string
    {
        return $this->target;
    }

    /**
     * The target of the link when we click on it.
     *
     * `self` - Self
     * `blank` - Blank
     */
    public function setTarget(string $target): self
    {
        $this->initialized['target'] = true;
        $this->target = $target;

        return $this;
    }

    /**
     * The url of the page to open.
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * The url of the page to open.
     */
    public function setUrl(string $url): self
    {
        $this->initialized['url'] = true;
        $this->url = $url;

        return $this;
    }
}
