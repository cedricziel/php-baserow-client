<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class PatchedTokenUpdate extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The human readable name of the database token for the user.
     *
     * @var string
     */
    protected $name;
    /**
     * Indicates per operation which permissions the database token has within the whole workspace. If the value of for example `create` is `true`, then the token can create rows in all tables related to the workspace. If a list is provided with for example `[["table", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[['database', 1]]` means create permissions for all tables in the database with id 1.
     *
     * Example:
     * ```json
     * {
     * "create": true// Allows creating rows in all tables.
     * // Allows reading rows from database 1 and table 10.
     * "read": [["database", 1], ["table", 10]],
     * "update": false  // Denies updating rows in all tables.
     * "delete": []  // Denies deleting rows in all tables.
     * }
     * ```
     *
     * @var PatchedTokenUpdatePermissions
     */
    protected $permissions;
    /**
     * Indicates if a new key must be generated.
     *
     * @var bool
     */
    protected $rotateKey = false;

    /**
     * The human readable name of the database token for the user.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * The human readable name of the database token for the user.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Indicates per operation which permissions the database token has within the whole workspace. If the value of for example `create` is `true`, then the token can create rows in all tables related to the workspace. If a list is provided with for example `[["table", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[['database', 1]]` means create permissions for all tables in the database with id 1.
     *
     * Example:
     * ```json
     * {
     * "create": true// Allows creating rows in all tables.
     * // Allows reading rows from database 1 and table 10.
     * "read": [["database", 1], ["table", 10]],
     * "update": false  // Denies updating rows in all tables.
     * "delete": []  // Denies deleting rows in all tables.
     * }
     * ```
     */
    public function getPermissions(): PatchedTokenUpdatePermissions
    {
        return $this->permissions;
    }

    /**
     * Indicates per operation which permissions the database token has within the whole workspace. If the value of for example `create` is `true`, then the token can create rows in all tables related to the workspace. If a list is provided with for example `[["table", 1]]` then the token only has create permissions for the table with id 1. Same goes for if a database references is provided. `[['database', 1]]` means create permissions for all tables in the database with id 1.
     *
     * Example:
     * ```json
     * {
     * "create": true// Allows creating rows in all tables.
     * // Allows reading rows from database 1 and table 10.
     * "read": [["database", 1], ["table", 10]],
     * "update": false  // Denies updating rows in all tables.
     * "delete": []  // Denies deleting rows in all tables.
     * }
     * ```
     */
    public function setPermissions(PatchedTokenUpdatePermissions $permissions): self
    {
        $this->initialized['permissions'] = true;
        $this->permissions = $permissions;

        return $this;
    }

    /**
     * Indicates if a new key must be generated.
     */
    public function getRotateKey(): bool
    {
        return $this->rotateKey;
    }

    /**
     * Indicates if a new key must be generated.
     */
    public function setRotateKey(bool $rotateKey): self
    {
        $this->initialized['rotateKey'] = true;
        $this->rotateKey = $rotateKey;

        return $this;
    }
}
