<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class PatchedUpdateViewFilter extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The field of which the value must be compared to the filter value.
     *
     * @var int
     */
    protected $field;
    /**
     * Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     *
     * `equal` - equal
     * `not_equal` - not_equal
     * `filename_contains` - filename_contains
     * `files_lower_than` - files_lower_than
     * `has_file_type` - has_file_type
     * `contains` - contains
     * `contains_not` - contains_not
     * `contains_word` - contains_word
     * `doesnt_contain_word` - doesnt_contain_word
     * `length_is_lower_than` - length_is_lower_than
     * `higher_than` - higher_than
     * `higher_than_or_equal` - higher_than_or_equal
     * `lower_than` - lower_than
     * `lower_than_or_equal` - lower_than_or_equal
     * `is_even_and_whole` - is_even_and_whole
     * `date_equal` - date_equal
     * `date_before` - date_before
     * `date_before_or_equal` - date_before_or_equal
     * `date_after_days_ago` - date_after_days_ago
     * `date_after` - date_after
     * `date_after_or_equal` - date_after_or_equal
     * `date_not_equal` - date_not_equal
     * `date_equals_today` - date_equals_today
     * `date_before_today` - date_before_today
     * `date_after_today` - date_after_today
     * `date_within_days` - date_within_days
     * `date_within_weeks` - date_within_weeks
     * `date_within_months` - date_within_months
     * `date_equals_days_ago` - date_equals_days_ago
     * `date_equals_months_ago` - date_equals_months_ago
     * `date_equals_years_ago` - date_equals_years_ago
     * `date_equals_week` - date_equals_week
     * `date_equals_month` - date_equals_month
     * `date_equals_day_of_month` - date_equals_day_of_month
     * `date_equals_year` - date_equals_year
     * `date_is` - date_is
     * `date_is_not` - date_is_not
     * `date_is_before` - date_is_before
     * `date_is_on_or_before` - date_is_on_or_before
     * `date_is_after` - date_is_after
     * `date_is_on_or_after` - date_is_on_or_after
     * `date_is_within` - date_is_within
     * `single_select_equal` - single_select_equal
     * `single_select_not_equal` - single_select_not_equal
     * `single_select_is_any_of` - single_select_is_any_of
     * `single_select_is_none_of` - single_select_is_none_of
     * `link_row_has` - link_row_has
     * `link_row_has_not` - link_row_has_not
     * `link_row_contains` - link_row_contains
     * `link_row_not_contains` - link_row_not_contains
     * `boolean` - boolean
     * `empty` - empty
     * `not_empty` - not_empty
     * `multiple_select_has` - multiple_select_has
     * `multiple_select_has_not` - multiple_select_has_not
     * `multiple_collaborators_has` - multiple_collaborators_has
     * `multiple_collaborators_has_not` - multiple_collaborators_has_not
     * `user_is` - user_is
     * `user_is_not` - user_is_not
     *
     * @var string
     */
    protected $type;
    /**
     * The filter value that must be compared to the field's value.
     *
     * @var string
     */
    protected $value;

    /**
     * The field of which the value must be compared to the filter value.
     */
    public function getField(): int
    {
        return $this->field;
    }

    /**
     * The field of which the value must be compared to the filter value.
     */
    public function setField(int $field): self
    {
        $this->initialized['field'] = true;
        $this->field = $field;

        return $this;
    }

    /**
     * Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     *
     * `equal` - equal
     * `not_equal` - not_equal
     * `filename_contains` - filename_contains
     * `files_lower_than` - files_lower_than
     * `has_file_type` - has_file_type
     * `contains` - contains
     * `contains_not` - contains_not
     * `contains_word` - contains_word
     * `doesnt_contain_word` - doesnt_contain_word
     * `length_is_lower_than` - length_is_lower_than
     * `higher_than` - higher_than
     * `higher_than_or_equal` - higher_than_or_equal
     * `lower_than` - lower_than
     * `lower_than_or_equal` - lower_than_or_equal
     * `is_even_and_whole` - is_even_and_whole
     * `date_equal` - date_equal
     * `date_before` - date_before
     * `date_before_or_equal` - date_before_or_equal
     * `date_after_days_ago` - date_after_days_ago
     * `date_after` - date_after
     * `date_after_or_equal` - date_after_or_equal
     * `date_not_equal` - date_not_equal
     * `date_equals_today` - date_equals_today
     * `date_before_today` - date_before_today
     * `date_after_today` - date_after_today
     * `date_within_days` - date_within_days
     * `date_within_weeks` - date_within_weeks
     * `date_within_months` - date_within_months
     * `date_equals_days_ago` - date_equals_days_ago
     * `date_equals_months_ago` - date_equals_months_ago
     * `date_equals_years_ago` - date_equals_years_ago
     * `date_equals_week` - date_equals_week
     * `date_equals_month` - date_equals_month
     * `date_equals_day_of_month` - date_equals_day_of_month
     * `date_equals_year` - date_equals_year
     * `date_is` - date_is
     * `date_is_not` - date_is_not
     * `date_is_before` - date_is_before
     * `date_is_on_or_before` - date_is_on_or_before
     * `date_is_after` - date_is_after
     * `date_is_on_or_after` - date_is_on_or_after
     * `date_is_within` - date_is_within
     * `single_select_equal` - single_select_equal
     * `single_select_not_equal` - single_select_not_equal
     * `single_select_is_any_of` - single_select_is_any_of
     * `single_select_is_none_of` - single_select_is_none_of
     * `link_row_has` - link_row_has
     * `link_row_has_not` - link_row_has_not
     * `link_row_contains` - link_row_contains
     * `link_row_not_contains` - link_row_not_contains
     * `boolean` - boolean
     * `empty` - empty
     * `not_empty` - not_empty
     * `multiple_select_has` - multiple_select_has
     * `multiple_select_has_not` - multiple_select_has_not
     * `multiple_collaborators_has` - multiple_collaborators_has
     * `multiple_collaborators_has_not` - multiple_collaborators_has_not
     * `user_is` - user_is
     * `user_is_not` - user_is_not
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     *
     * `equal` - equal
     * `not_equal` - not_equal
     * `filename_contains` - filename_contains
     * `files_lower_than` - files_lower_than
     * `has_file_type` - has_file_type
     * `contains` - contains
     * `contains_not` - contains_not
     * `contains_word` - contains_word
     * `doesnt_contain_word` - doesnt_contain_word
     * `length_is_lower_than` - length_is_lower_than
     * `higher_than` - higher_than
     * `higher_than_or_equal` - higher_than_or_equal
     * `lower_than` - lower_than
     * `lower_than_or_equal` - lower_than_or_equal
     * `is_even_and_whole` - is_even_and_whole
     * `date_equal` - date_equal
     * `date_before` - date_before
     * `date_before_or_equal` - date_before_or_equal
     * `date_after_days_ago` - date_after_days_ago
     * `date_after` - date_after
     * `date_after_or_equal` - date_after_or_equal
     * `date_not_equal` - date_not_equal
     * `date_equals_today` - date_equals_today
     * `date_before_today` - date_before_today
     * `date_after_today` - date_after_today
     * `date_within_days` - date_within_days
     * `date_within_weeks` - date_within_weeks
     * `date_within_months` - date_within_months
     * `date_equals_days_ago` - date_equals_days_ago
     * `date_equals_months_ago` - date_equals_months_ago
     * `date_equals_years_ago` - date_equals_years_ago
     * `date_equals_week` - date_equals_week
     * `date_equals_month` - date_equals_month
     * `date_equals_day_of_month` - date_equals_day_of_month
     * `date_equals_year` - date_equals_year
     * `date_is` - date_is
     * `date_is_not` - date_is_not
     * `date_is_before` - date_is_before
     * `date_is_on_or_before` - date_is_on_or_before
     * `date_is_after` - date_is_after
     * `date_is_on_or_after` - date_is_on_or_after
     * `date_is_within` - date_is_within
     * `single_select_equal` - single_select_equal
     * `single_select_not_equal` - single_select_not_equal
     * `single_select_is_any_of` - single_select_is_any_of
     * `single_select_is_none_of` - single_select_is_none_of
     * `link_row_has` - link_row_has
     * `link_row_has_not` - link_row_has_not
     * `link_row_contains` - link_row_contains
     * `link_row_not_contains` - link_row_not_contains
     * `boolean` - boolean
     * `empty` - empty
     * `not_empty` - not_empty
     * `multiple_select_has` - multiple_select_has
     * `multiple_select_has_not` - multiple_select_has_not
     * `multiple_collaborators_has` - multiple_collaborators_has
     * `multiple_collaborators_has_not` - multiple_collaborators_has_not
     * `user_is` - user_is
     * `user_is_not` - user_is_not
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The filter value that must be compared to the field's value.
     */
    public function getValue(): string
    {
        return $this->value;
    }

    /**
     * The filter value that must be compared to the field's value.
     */
    public function setValue(string $value): self
    {
        $this->initialized['value'] = true;
        $this->value = $value;

        return $this;
    }
}
