<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class LocalBaserowTableServiceFilter extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * @var int
     */
    protected $order;
    /**
     * The database Field, in the LocalBaserowTableService, which we would like to filter upon.
     *
     * @var int
     */
    protected $field;
    /**
     * Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     *
     * @var string
     */
    protected $type;
    /**
     * A formula for the filter's value.
     *
     * @var string
     */
    protected $value;
    /**
     * Indicates whether the value is a formula or not.
     *
     * @var bool
     */
    protected $valueIsFormula = false;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getOrder(): int
    {
        return $this->order;
    }

    public function setOrder(int $order): self
    {
        $this->initialized['order'] = true;
        $this->order = $order;

        return $this;
    }

    /**
     * The database Field, in the LocalBaserowTableService, which we would like to filter upon.
     */
    public function getField(): int
    {
        return $this->field;
    }

    /**
     * The database Field, in the LocalBaserowTableService, which we would like to filter upon.
     */
    public function setField(int $field): self
    {
        $this->initialized['field'] = true;
        $this->field = $field;

        return $this;
    }

    /**
     * Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * Indicates how the field's value must be compared to the filter's value. The filter is always in this order `field` `type` `value` (example: `field_1` `contains` `Test`).
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * A formula for the filter's value.
     */
    public function getValue(): string
    {
        return $this->value;
    }

    /**
     * A formula for the filter's value.
     */
    public function setValue(string $value): self
    {
        $this->initialized['value'] = true;
        $this->value = $value;

        return $this;
    }

    /**
     * Indicates whether the value is a formula or not.
     */
    public function getValueIsFormula(): bool
    {
        return $this->valueIsFormula;
    }

    /**
     * Indicates whether the value is a formula or not.
     */
    public function setValueIsFormula(bool $valueIsFormula): self
    {
        $this->initialized['valueIsFormula'] = true;
        $this->valueIsFormula = $valueIsFormula;

        return $this;
    }
}
