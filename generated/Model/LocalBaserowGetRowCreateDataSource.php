<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class LocalBaserowGetRowCreateDataSource extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The type of the service.
     *
     * `local_baserow_get_row` - local_baserow_get_row
     * `local_baserow_list_rows` - local_baserow_list_rows
     * `local_baserow_upsert_row` - local_baserow_upsert_row
     *
     * @var string
     */
    protected $type;
    /**
     * Human name for this data source.
     *
     * @var string|null
     */
    protected $name;
    /**
     * Page this data source is linked to.
     *
     * @var int|null
     */
    protected $pageId;
    /**
     * If provided, creates the data_source before the data_source with the given id.
     *
     * @var int
     */
    protected $beforeId;
    /**
     * @var string
     */
    protected $rowId;
    /**
     * @var int|null
     */
    protected $tableId;
    /**
     * @var int|null
     */
    protected $viewId;
    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).
     *
     * `AND` - And
     * `OR` - Or
     *
     * @var string
     */
    protected $filterType;
    /**
     * The query to apply to the service to narrow the results down.
     *
     * @var string
     */
    protected $searchQuery;
    /**
     * @var list<LocalBaserowTableServiceFilter>
     */
    protected $filters;

    /**
     * The type of the service.
     *
     * `local_baserow_get_row` - local_baserow_get_row
     * `local_baserow_list_rows` - local_baserow_list_rows
     * `local_baserow_upsert_row` - local_baserow_upsert_row
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The type of the service.
     *
     * `local_baserow_get_row` - local_baserow_get_row
     * `local_baserow_list_rows` - local_baserow_list_rows
     * `local_baserow_upsert_row` - local_baserow_upsert_row
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * Human name for this data source.
     */
    public function getName(): ?string
    {
        return $this->name;
    }

    /**
     * Human name for this data source.
     */
    public function setName(?string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Page this data source is linked to.
     */
    public function getPageId(): ?int
    {
        return $this->pageId;
    }

    /**
     * Page this data source is linked to.
     */
    public function setPageId(?int $pageId): self
    {
        $this->initialized['pageId'] = true;
        $this->pageId = $pageId;

        return $this;
    }

    /**
     * If provided, creates the data_source before the data_source with the given id.
     */
    public function getBeforeId(): int
    {
        return $this->beforeId;
    }

    /**
     * If provided, creates the data_source before the data_source with the given id.
     */
    public function setBeforeId(int $beforeId): self
    {
        $this->initialized['beforeId'] = true;
        $this->beforeId = $beforeId;

        return $this;
    }

    public function getRowId(): string
    {
        return $this->rowId;
    }

    public function setRowId(string $rowId): self
    {
        $this->initialized['rowId'] = true;
        $this->rowId = $rowId;

        return $this;
    }

    public function getTableId(): ?int
    {
        return $this->tableId;
    }

    public function setTableId(?int $tableId): self
    {
        $this->initialized['tableId'] = true;
        $this->tableId = $tableId;

        return $this;
    }

    public function getViewId(): ?int
    {
        return $this->viewId;
    }

    public function setViewId(?int $viewId): self
    {
        $this->initialized['viewId'] = true;
        $this->viewId = $viewId;

        return $this;
    }

    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).
     *
     * `AND` - And
     * `OR` - Or
     */
    public function getFilterType(): string
    {
        return $this->filterType;
    }

    /**
     * Indicates whether all the rows should apply to all filters (AND) or to any filter (OR).
     *
     * `AND` - And
     * `OR` - Or
     */
    public function setFilterType(string $filterType): self
    {
        $this->initialized['filterType'] = true;
        $this->filterType = $filterType;

        return $this;
    }

    /**
     * The query to apply to the service to narrow the results down.
     */
    public function getSearchQuery(): string
    {
        return $this->searchQuery;
    }

    /**
     * The query to apply to the service to narrow the results down.
     */
    public function setSearchQuery(string $searchQuery): self
    {
        $this->initialized['searchQuery'] = true;
        $this->searchQuery = $searchQuery;

        return $this;
    }

    /**
     * @return list<LocalBaserowTableServiceFilter>
     */
    public function getFilters(): array
    {
        return $this->filters;
    }

    /**
     * @param list<LocalBaserowTableServiceFilter> $filters
     */
    public function setFilters(array $filters): self
    {
        $this->initialized['filters'] = true;
        $this->filters = $filters;

        return $this;
    }
}
