<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class ConditionalColorValueProviderConfColor extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * A unique identifier for this condition.
     *
     * @var string
     */
    protected $id;
    /**
     * The color the decorator should take if the defined conditions apply.
     *
     * @var string
     */
    protected $color;
    /**
     * A list of conditions that the row must meet to get the selected color. This list of conditions can be empty, in that case, this color will always match the row values.
     *
     * @var list<ConditionalColorValueProviderConfColorFilter>
     */
    protected $filters;
    /**
     * A list of filter groups that the row must meet to get the selected color.
     *
     * @var list<ConditionalColorValueProviderConfColorFilterGroup>
     */
    protected $filterGroups;
    /**
     * The boolean operator used to group all conditions.
     *
     * `AND` - And
     * `OR` - Or
     *
     * @var string
     */
    protected $operator = 'AND';

    /**
     * A unique identifier for this condition.
     */
    public function getId(): string
    {
        return $this->id;
    }

    /**
     * A unique identifier for this condition.
     */
    public function setId(string $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The color the decorator should take if the defined conditions apply.
     */
    public function getColor(): string
    {
        return $this->color;
    }

    /**
     * The color the decorator should take if the defined conditions apply.
     */
    public function setColor(string $color): self
    {
        $this->initialized['color'] = true;
        $this->color = $color;

        return $this;
    }

    /**
     * A list of conditions that the row must meet to get the selected color. This list of conditions can be empty, in that case, this color will always match the row values.
     *
     * @return list<ConditionalColorValueProviderConfColorFilter>
     */
    public function getFilters(): array
    {
        return $this->filters;
    }

    /**
     * A list of conditions that the row must meet to get the selected color. This list of conditions can be empty, in that case, this color will always match the row values.
     *
     * @param list<ConditionalColorValueProviderConfColorFilter> $filters
     */
    public function setFilters(array $filters): self
    {
        $this->initialized['filters'] = true;
        $this->filters = $filters;

        return $this;
    }

    /**
     * A list of filter groups that the row must meet to get the selected color.
     *
     * @return list<ConditionalColorValueProviderConfColorFilterGroup>
     */
    public function getFilterGroups(): array
    {
        return $this->filterGroups;
    }

    /**
     * A list of filter groups that the row must meet to get the selected color.
     *
     * @param list<ConditionalColorValueProviderConfColorFilterGroup> $filterGroups
     */
    public function setFilterGroups(array $filterGroups): self
    {
        $this->initialized['filterGroups'] = true;
        $this->filterGroups = $filterGroups;

        return $this;
    }

    /**
     * The boolean operator used to group all conditions.
     *
     * `AND` - And
     * `OR` - Or
     */
    public function getOperator(): string
    {
        return $this->operator;
    }

    /**
     * The boolean operator used to group all conditions.
     *
     * `AND` - And
     * `OR` - Or
     */
    public function setOperator(string $operator): self
    {
        $this->initialized['operator'] = true;
        $this->operator = $operator;

        return $this;
    }
}
