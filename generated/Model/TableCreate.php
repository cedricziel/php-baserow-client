<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class TableCreate extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $name;
    /**
     * A list of rows that needs to be created as initial table data. Each row is a list of values that are going to be added in the new table in the same order as provided.
     *
     * Ex:
     * ```json
     * [
     * ["row1_field1_value", "row1_field2_value"],
     * ["row2_field1_value", "row2_field2_value"],
     * ]
     * ```
     * for creating a two rows table with two fields.
     *
     * If not provided, some example data is going to be created.
     *
     * @var list<mixed>
     */
    protected $data;
    /**
     * Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called "Field N".
     *
     * @var bool
     */
    protected $firstRowHeader = false;

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * A list of rows that needs to be created as initial table data. Each row is a list of values that are going to be added in the new table in the same order as provided.
     *
     * Ex:
     * ```json
     * [
     * ["row1_field1_value", "row1_field2_value"],
     * ["row2_field1_value", "row2_field2_value"],
     * ]
     * ```
     * for creating a two rows table with two fields.
     *
     * If not provided, some example data is going to be created.
     *
     * @return list<mixed>
     */
    public function getData(): array
    {
        return $this->data;
    }

    /**
     * A list of rows that needs to be created as initial table data. Each row is a list of values that are going to be added in the new table in the same order as provided.
     *
     * Ex:
     * ```json
     * [
     * ["row1_field1_value", "row1_field2_value"],
     * ["row2_field1_value", "row2_field2_value"],
     * ]
     * ```
     * for creating a two rows table with two fields.
     *
     * If not provided, some example data is going to be created.
     *
     * @param list<mixed> $data
     */
    public function setData(array $data): self
    {
        $this->initialized['data'] = true;
        $this->data = $data;

        return $this;
    }

    /**
     * Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called "Field N".
     */
    public function getFirstRowHeader(): bool
    {
        return $this->firstRowHeader;
    }

    /**
     * Indicates if the first provided row is the header. If true the field names are going to be the values of the first row. Otherwise they will be called "Field N".
     */
    public function setFirstRowHeader(bool $firstRowHeader): self
    {
        $this->initialized['firstRowHeader'] = true;
        $this->firstRowHeader = $firstRowHeader;

        return $this;
    }
}
