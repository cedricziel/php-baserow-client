<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class Register extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $name;
    /**
     * The email address is also going to be the username.
     *
     * @var string
     */
    protected $email;
    /**
     * @var string
     */
    protected $password;
    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     *
     * @var string
     */
    protected $language = 'en';
    /**
     * Indicates whether an authentication JWT should be generated and be included in the response.
     *
     * @var bool
     */
    protected $authenticate = false;
    /**
     * DEPRECATED: Please use `workspace_invitation_token` which this attribute is being renamed to in 2024.
     *
     * @var string
     */
    protected $groupInvitationToken;
    /**
     * If provided and valid, the user accepts the workspace invitation and will have access to the workspace after signing up.
     *
     * @var string
     */
    protected $workspaceInvitationToken;
    /**
     * The id of the template that must be installed after creating the account. This only works if the `workspace_invitation_token` param is not provided.
     *
     * @var int
     */
    protected $templateId;

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * The email address is also going to be the username.
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * The email address is also going to be the username.
     */
    public function setEmail(string $email): self
    {
        $this->initialized['email'] = true;
        $this->email = $email;

        return $this;
    }

    public function getPassword(): string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->initialized['password'] = true;
        $this->password = $password;

        return $this;
    }

    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     */
    public function getLanguage(): string
    {
        return $this->language;
    }

    /**
     * An ISO 639 language code (with optional variant) selected by the user. Ex: en-GB.
     */
    public function setLanguage(string $language): self
    {
        $this->initialized['language'] = true;
        $this->language = $language;

        return $this;
    }

    /**
     * Indicates whether an authentication JWT should be generated and be included in the response.
     */
    public function getAuthenticate(): bool
    {
        return $this->authenticate;
    }

    /**
     * Indicates whether an authentication JWT should be generated and be included in the response.
     */
    public function setAuthenticate(bool $authenticate): self
    {
        $this->initialized['authenticate'] = true;
        $this->authenticate = $authenticate;

        return $this;
    }

    /**
     * DEPRECATED: Please use `workspace_invitation_token` which this attribute is being renamed to in 2024.
     */
    public function getGroupInvitationToken(): string
    {
        return $this->groupInvitationToken;
    }

    /**
     * DEPRECATED: Please use `workspace_invitation_token` which this attribute is being renamed to in 2024.
     */
    public function setGroupInvitationToken(string $groupInvitationToken): self
    {
        $this->initialized['groupInvitationToken'] = true;
        $this->groupInvitationToken = $groupInvitationToken;

        return $this;
    }

    /**
     * If provided and valid, the user accepts the workspace invitation and will have access to the workspace after signing up.
     */
    public function getWorkspaceInvitationToken(): string
    {
        return $this->workspaceInvitationToken;
    }

    /**
     * If provided and valid, the user accepts the workspace invitation and will have access to the workspace after signing up.
     */
    public function setWorkspaceInvitationToken(string $workspaceInvitationToken): self
    {
        $this->initialized['workspaceInvitationToken'] = true;
        $this->workspaceInvitationToken = $workspaceInvitationToken;

        return $this;
    }

    /**
     * The id of the template that must be installed after creating the account. This only works if the `workspace_invitation_token` param is not provided.
     */
    public function getTemplateId(): int
    {
        return $this->templateId;
    }

    /**
     * The id of the template that must be installed after creating the account. This only works if the `workspace_invitation_token` param is not provided.
     */
    public function setTemplateId(int $templateId): self
    {
        $this->initialized['templateId'] = true;
        $this->templateId = $templateId;

        return $this;
    }
}
