<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class GeneratedSingleSelectColorViewDecoration extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * The view to which the decoration applies. Each view can have his own decorations.
     *
     * @var int
     */
    protected $view;
    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.
     *
     * @var string
     */
    protected $type;
    /**
     * The value provider type that gives the value to the decorator.
     *
     * @var string
     */
    protected $valueProviderType;
    /**
     * The configuration of the value provider.
     *
     * @var GeneratedSingleSelectColorViewDecorationValueProviderConf
     */
    protected $valueProviderConf;
    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     *
     * @var int
     */
    protected $order;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * The view to which the decoration applies. Each view can have his own decorations.
     */
    public function getView(): int
    {
        return $this->view;
    }

    /**
     * The view to which the decoration applies. Each view can have his own decorations.
     */
    public function setView(int $view): self
    {
        $this->initialized['view'] = true;
        $this->view = $view;

        return $this;
    }

    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The decorator type. This is then interpreted by the frontend to display the decoration.
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * The value provider type that gives the value to the decorator.
     */
    public function getValueProviderType(): string
    {
        return $this->valueProviderType;
    }

    /**
     * The value provider type that gives the value to the decorator.
     */
    public function setValueProviderType(string $valueProviderType): self
    {
        $this->initialized['valueProviderType'] = true;
        $this->valueProviderType = $valueProviderType;

        return $this;
    }

    /**
     * The configuration of the value provider.
     */
    public function getValueProviderConf(): GeneratedSingleSelectColorViewDecorationValueProviderConf
    {
        return $this->valueProviderConf;
    }

    /**
     * The configuration of the value provider.
     */
    public function setValueProviderConf(GeneratedSingleSelectColorViewDecorationValueProviderConf $valueProviderConf): self
    {
        $this->initialized['valueProviderConf'] = true;
        $this->valueProviderConf = $valueProviderConf;

        return $this;
    }

    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     */
    public function getOrder(): int
    {
        return $this->order;
    }

    /**
     * The position of the decorator has within the view, lowest first. If there is another decorator with the same order value then the decorator with the lowest id must be shown first.
     */
    public function setOrder(int $order): self
    {
        $this->initialized['order'] = true;
        $this->order = $order;

        return $this;
    }
}
