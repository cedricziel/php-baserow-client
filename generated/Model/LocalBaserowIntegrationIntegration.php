<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class LocalBaserowIntegrationIntegration extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * @var int
     */
    protected $applicationId;
    /**
     * The type of the integration.
     *
     * @var string
     */
    protected $type;
    /**
     * @var string
     */
    protected $name;
    /**
     * Lowest first.
     *
     * @var string
     */
    protected $order;
    /**
     * @var LocalBaserowIntegrationIntegrationContextData
     */
    protected $contextData;
    /**
     * @var LocalBaserowIntegrationIntegrationAuthorizedUser
     */
    protected $authorizedUser;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getApplicationId(): int
    {
        return $this->applicationId;
    }

    public function setApplicationId(int $applicationId): self
    {
        $this->initialized['applicationId'] = true;
        $this->applicationId = $applicationId;

        return $this;
    }

    /**
     * The type of the integration.
     */
    public function getType(): string
    {
        return $this->type;
    }

    /**
     * The type of the integration.
     */
    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Lowest first.
     */
    public function getOrder(): string
    {
        return $this->order;
    }

    /**
     * Lowest first.
     */
    public function setOrder(string $order): self
    {
        $this->initialized['order'] = true;
        $this->order = $order;

        return $this;
    }

    public function getContextData(): LocalBaserowIntegrationIntegrationContextData
    {
        return $this->contextData;
    }

    public function setContextData(LocalBaserowIntegrationIntegrationContextData $contextData): self
    {
        $this->initialized['contextData'] = true;
        $this->contextData = $contextData;

        return $this;
    }

    public function getAuthorizedUser(): LocalBaserowIntegrationIntegrationAuthorizedUser
    {
        return $this->authorizedUser;
    }

    public function setAuthorizedUser(LocalBaserowIntegrationIntegrationAuthorizedUser $authorizedUser): self
    {
        $this->initialized['authorizedUser'] = true;
        $this->authorizedUser = $authorizedUser;

        return $this;
    }
}
