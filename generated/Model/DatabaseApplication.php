<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class DatabaseApplication extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * @var string
     */
    protected $name;
    /**
     * @var int
     */
    protected $order;
    /**
     * @var string
     */
    protected $type;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     *
     * @var DatabaseApplicationGroup
     */
    protected $group;
    /**
     * The workspace that the application belongs to.
     *
     * @var DatabaseApplicationWorkspace
     */
    protected $workspace;
    /**
     * This field is specific to the `database` application and contains an array of tables that are in the database.
     *
     * @var list<TableSerializerWithFields>
     */
    protected $tables;
    /**
     * This field is specific to the `database` application and contains an array of views that are in the tables.
     *
     * @var list<LocalBaserowView>
     */
    protected $views;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    public function getOrder(): int
    {
        return $this->order;
    }

    public function setOrder(int $order): self
    {
        $this->initialized['order'] = true;
        $this->order = $order;

        return $this;
    }

    public function getType(): string
    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->initialized['type'] = true;
        $this->type = $type;

        return $this;
    }

    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     */
    public function getGroup(): DatabaseApplicationGroup
    {
        return $this->group;
    }

    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     */
    public function setGroup(DatabaseApplicationGroup $group): self
    {
        $this->initialized['group'] = true;
        $this->group = $group;

        return $this;
    }

    /**
     * The workspace that the application belongs to.
     */
    public function getWorkspace(): DatabaseApplicationWorkspace
    {
        return $this->workspace;
    }

    /**
     * The workspace that the application belongs to.
     */
    public function setWorkspace(DatabaseApplicationWorkspace $workspace): self
    {
        $this->initialized['workspace'] = true;
        $this->workspace = $workspace;

        return $this;
    }

    /**
     * This field is specific to the `database` application and contains an array of tables that are in the database.
     *
     * @return list<TableSerializerWithFields>
     */
    public function getTables(): array
    {
        return $this->tables;
    }

    /**
     * This field is specific to the `database` application and contains an array of tables that are in the database.
     *
     * @param list<TableSerializerWithFields> $tables
     */
    public function setTables(array $tables): self
    {
        $this->initialized['tables'] = true;
        $this->tables = $tables;

        return $this;
    }

    /**
     * This field is specific to the `database` application and contains an array of views that are in the tables.
     *
     * @return list<LocalBaserowView>
     */
    public function getViews(): array
    {
        return $this->views;
    }

    /**
     * This field is specific to the `database` application and contains an array of views that are in the tables.
     *
     * @param list<LocalBaserowView> $views
     */
    public function setViews(array $views): self
    {
        $this->initialized['views'] = true;
        $this->views = $views;

        return $this;
    }
}
