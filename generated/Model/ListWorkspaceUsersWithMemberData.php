<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class ListWorkspaceUsersWithMemberData extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * User defined name.
     *
     * @var string
     */
    protected $name;
    /**
     * User email.
     *
     * @var string
     */
    protected $email;
    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     *
     * @var int
     */
    protected $group;
    /**
     * The workspace that the user has access to.
     *
     * @var int
     */
    protected $workspace;
    /**
     * The permissions that the user has within the workspace.
     *
     * @var string
     */
    protected $permissions;
    /**
     * @var \DateTime
     */
    protected $createdOn;
    /**
     * The user that has access to the workspace.
     *
     * @var int
     */
    protected $userId;
    /**
     * True if user account is pending deletion.
     *
     * @var bool
     */
    protected $toBeDeleted;
    /**
     * Enterprise only: a list of team IDs and names, which this workspace user belongs to in this workspace.
     *
     * @var list<WorkspaceUserEnterpriseTeam>
     */
    protected $teams;
    /**
     * Enterprise or advanced only: the uid of the role that is assigned to this workspace user in this workspace.
     *
     * @var string|null
     */
    protected $roleUid;
    /**
     * Enterprise or advanced only: the highest role uid assigned to this user in this workspace on anything, including roles from teams.
     *
     * @var string|null
     */
    protected $highestRoleUid;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * User defined name.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * User defined name.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * User email.
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    /**
     * User email.
     */
    public function setEmail(string $email): self
    {
        $this->initialized['email'] = true;
        $this->email = $email;

        return $this;
    }

    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     */
    public function getGroup(): int
    {
        return $this->group;
    }

    /**
     * DEPRECATED: Please use the functionally identical `workspace` instead as this field is being removed in the future.
     */
    public function setGroup(int $group): self
    {
        $this->initialized['group'] = true;
        $this->group = $group;

        return $this;
    }

    /**
     * The workspace that the user has access to.
     */
    public function getWorkspace(): int
    {
        return $this->workspace;
    }

    /**
     * The workspace that the user has access to.
     */
    public function setWorkspace(int $workspace): self
    {
        $this->initialized['workspace'] = true;
        $this->workspace = $workspace;

        return $this;
    }

    /**
     * The permissions that the user has within the workspace.
     */
    public function getPermissions(): string
    {
        return $this->permissions;
    }

    /**
     * The permissions that the user has within the workspace.
     */
    public function setPermissions(string $permissions): self
    {
        $this->initialized['permissions'] = true;
        $this->permissions = $permissions;

        return $this;
    }

    public function getCreatedOn(): \DateTime
    {
        return $this->createdOn;
    }

    public function setCreatedOn(\DateTime $createdOn): self
    {
        $this->initialized['createdOn'] = true;
        $this->createdOn = $createdOn;

        return $this;
    }

    /**
     * The user that has access to the workspace.
     */
    public function getUserId(): int
    {
        return $this->userId;
    }

    /**
     * The user that has access to the workspace.
     */
    public function setUserId(int $userId): self
    {
        $this->initialized['userId'] = true;
        $this->userId = $userId;

        return $this;
    }

    /**
     * True if user account is pending deletion.
     */
    public function getToBeDeleted(): bool
    {
        return $this->toBeDeleted;
    }

    /**
     * True if user account is pending deletion.
     */
    public function setToBeDeleted(bool $toBeDeleted): self
    {
        $this->initialized['toBeDeleted'] = true;
        $this->toBeDeleted = $toBeDeleted;

        return $this;
    }

    /**
     * Enterprise only: a list of team IDs and names, which this workspace user belongs to in this workspace.
     *
     * @return list<WorkspaceUserEnterpriseTeam>
     */
    public function getTeams(): array
    {
        return $this->teams;
    }

    /**
     * Enterprise only: a list of team IDs and names, which this workspace user belongs to in this workspace.
     *
     * @param list<WorkspaceUserEnterpriseTeam> $teams
     */
    public function setTeams(array $teams): self
    {
        $this->initialized['teams'] = true;
        $this->teams = $teams;

        return $this;
    }

    /**
     * Enterprise or advanced only: the uid of the role that is assigned to this workspace user in this workspace.
     */
    public function getRoleUid(): ?string
    {
        return $this->roleUid;
    }

    /**
     * Enterprise or advanced only: the uid of the role that is assigned to this workspace user in this workspace.
     */
    public function setRoleUid(?string $roleUid): self
    {
        $this->initialized['roleUid'] = true;
        $this->roleUid = $roleUid;

        return $this;
    }

    /**
     * Enterprise or advanced only: the highest role uid assigned to this user in this workspace on anything, including roles from teams.
     */
    public function getHighestRoleUid(): ?string
    {
        return $this->highestRoleUid;
    }

    /**
     * Enterprise or advanced only: the highest role uid assigned to this user in this workspace on anything, including roles from teams.
     */
    public function setHighestRoleUid(?string $highestRoleUid): self
    {
        $this->initialized['highestRoleUid'] = true;
        $this->highestRoleUid = $highestRoleUid;

        return $this;
    }
}
