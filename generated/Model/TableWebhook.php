<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Model;

class TableWebhook extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * A list containing the events that will trigger this webhook.
     *
     * @var array<string, mixed>
     */
    protected $events;
    /**
     * The additional headers as an object where the key is the name and the value the value.
     *
     * @var array<string, mixed>
     */
    protected $headers;
    /**
     * All the calls that this webhook made.
     *
     * @var list<TableWebhookCall>
     */
    protected $calls;
    /**
     * @var \DateTime
     */
    protected $createdOn;
    /**
     * @var \DateTime
     */
    protected $updatedOn;
    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     *
     * @var bool
     */
    protected $useUserFieldNames;
    /**
     * The URL that must be called when the webhook is triggered.
     *
     * @var string
     */
    protected $url;
    /**
     * The request method that be used when the event occurs.
     *
     * `POST` - Post
     * `GET` - Get
     * `PUT` - Put
     * `PATCH` - Patch
     * `DELETE` - Delete
     *
     * @var string
     */
    protected $requestMethod;
    /**
     * An internal name of the webhook.
     *
     * @var string
     */
    protected $name;
    /**
     * Indicates whether this webhook should listen to all events.
     *
     * @var bool
     */
    protected $includeAllEvents;
    /**
     * The amount of failed webhook calls.
     *
     * @var int
     */
    protected $failedTriggers;
    /**
     * Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.
     *
     * @var bool
     */
    protected $active;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * A list containing the events that will trigger this webhook.
     *
     * @return array<string, mixed>
     */
    public function getEvents(): iterable
    {
        return $this->events;
    }

    /**
     * A list containing the events that will trigger this webhook.
     *
     * @param array<string, mixed> $events
     */
    public function setEvents(iterable $events): self
    {
        $this->initialized['events'] = true;
        $this->events = $events;

        return $this;
    }

    /**
     * The additional headers as an object where the key is the name and the value the value.
     *
     * @return array<string, mixed>
     */
    public function getHeaders(): iterable
    {
        return $this->headers;
    }

    /**
     * The additional headers as an object where the key is the name and the value the value.
     *
     * @param array<string, mixed> $headers
     */
    public function setHeaders(iterable $headers): self
    {
        $this->initialized['headers'] = true;
        $this->headers = $headers;

        return $this;
    }

    /**
     * All the calls that this webhook made.
     *
     * @return list<TableWebhookCall>
     */
    public function getCalls(): array
    {
        return $this->calls;
    }

    /**
     * All the calls that this webhook made.
     *
     * @param list<TableWebhookCall> $calls
     */
    public function setCalls(array $calls): self
    {
        $this->initialized['calls'] = true;
        $this->calls = $calls;

        return $this;
    }

    public function getCreatedOn(): \DateTime
    {
        return $this->createdOn;
    }

    public function setCreatedOn(\DateTime $createdOn): self
    {
        $this->initialized['createdOn'] = true;
        $this->createdOn = $createdOn;

        return $this;
    }

    public function getUpdatedOn(): \DateTime
    {
        return $this->updatedOn;
    }

    public function setUpdatedOn(\DateTime $updatedOn): self
    {
        $this->initialized['updatedOn'] = true;
        $this->updatedOn = $updatedOn;

        return $this;
    }

    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     */
    public function getUseUserFieldNames(): bool
    {
        return $this->useUserFieldNames;
    }

    /**
     * Indicates whether the field names must be used as payload key instead of the id.
     */
    public function setUseUserFieldNames(bool $useUserFieldNames): self
    {
        $this->initialized['useUserFieldNames'] = true;
        $this->useUserFieldNames = $useUserFieldNames;

        return $this;
    }

    /**
     * The URL that must be called when the webhook is triggered.
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * The URL that must be called when the webhook is triggered.
     */
    public function setUrl(string $url): self
    {
        $this->initialized['url'] = true;
        $this->url = $url;

        return $this;
    }

    /**
     * The request method that be used when the event occurs.
     *
     * `POST` - Post
     * `GET` - Get
     * `PUT` - Put
     * `PATCH` - Patch
     * `DELETE` - Delete
     */
    public function getRequestMethod(): string
    {
        return $this->requestMethod;
    }

    /**
     * The request method that be used when the event occurs.
     *
     * `POST` - Post
     * `GET` - Get
     * `PUT` - Put
     * `PATCH` - Patch
     * `DELETE` - Delete
     */
    public function setRequestMethod(string $requestMethod): self
    {
        $this->initialized['requestMethod'] = true;
        $this->requestMethod = $requestMethod;

        return $this;
    }

    /**
     * An internal name of the webhook.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * An internal name of the webhook.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * Indicates whether this webhook should listen to all events.
     */
    public function getIncludeAllEvents(): bool
    {
        return $this->includeAllEvents;
    }

    /**
     * Indicates whether this webhook should listen to all events.
     */
    public function setIncludeAllEvents(bool $includeAllEvents): self
    {
        $this->initialized['includeAllEvents'] = true;
        $this->includeAllEvents = $includeAllEvents;

        return $this;
    }

    /**
     * The amount of failed webhook calls.
     */
    public function getFailedTriggers(): int
    {
        return $this->failedTriggers;
    }

    /**
     * The amount of failed webhook calls.
     */
    public function setFailedTriggers(int $failedTriggers): self
    {
        $this->initialized['failedTriggers'] = true;
        $this->failedTriggers = $failedTriggers;

        return $this;
    }

    /**
     * Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.
     */
    public function getActive(): bool
    {
        return $this->active;
    }

    /**
     * Indicates whether the web hook is active. When a webhook has failed multiple times, it will automatically be deactivated.
     */
    public function setActive(bool $active): self
    {
        $this->initialized['active'] = true;
        $this->active = $active;

        return $this;
    }
}
