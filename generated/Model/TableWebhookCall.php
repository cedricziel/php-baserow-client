<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Model;

class TableWebhookCall extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $id;
    /**
     * Event ID where the call originated from.
     *
     * @var string
     */
    protected $eventId;
    /**
     * @var string
     */
    protected $eventType;
    /**
     * @var \DateTime|null
     */
    protected $calledTime;
    /**
     * @var string
     */
    protected $calledUrl;
    /**
     * A text copy of the request headers and body.
     *
     * @var string|null
     */
    protected $request;
    /**
     * A text copy of the response headers and body.
     *
     * @var string|null
     */
    protected $response;
    /**
     * The HTTP response status code.
     *
     * @var int|null
     */
    protected $responseStatus;
    /**
     * An internal error reflecting what went wrong.
     *
     * @var string|null
     */
    protected $error;

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): self
    {
        $this->initialized['id'] = true;
        $this->id = $id;

        return $this;
    }

    /**
     * Event ID where the call originated from.
     */
    public function getEventId(): string
    {
        return $this->eventId;
    }

    /**
     * Event ID where the call originated from.
     */
    public function setEventId(string $eventId): self
    {
        $this->initialized['eventId'] = true;
        $this->eventId = $eventId;

        return $this;
    }

    public function getEventType(): string
    {
        return $this->eventType;
    }

    public function setEventType(string $eventType): self
    {
        $this->initialized['eventType'] = true;
        $this->eventType = $eventType;

        return $this;
    }

    public function getCalledTime(): ?\DateTime
    {
        return $this->calledTime;
    }

    public function setCalledTime(?\DateTime $calledTime): self
    {
        $this->initialized['calledTime'] = true;
        $this->calledTime = $calledTime;

        return $this;
    }

    public function getCalledUrl(): string
    {
        return $this->calledUrl;
    }

    public function setCalledUrl(string $calledUrl): self
    {
        $this->initialized['calledUrl'] = true;
        $this->calledUrl = $calledUrl;

        return $this;
    }

    /**
     * A text copy of the request headers and body.
     */
    public function getRequest(): ?string
    {
        return $this->request;
    }

    /**
     * A text copy of the request headers and body.
     */
    public function setRequest(?string $request): self
    {
        $this->initialized['request'] = true;
        $this->request = $request;

        return $this;
    }

    /**
     * A text copy of the response headers and body.
     */
    public function getResponse(): ?string
    {
        return $this->response;
    }

    /**
     * A text copy of the response headers and body.
     */
    public function setResponse(?string $response): self
    {
        $this->initialized['response'] = true;
        $this->response = $response;

        return $this;
    }

    /**
     * The HTTP response status code.
     */
    public function getResponseStatus(): ?int
    {
        return $this->responseStatus;
    }

    /**
     * The HTTP response status code.
     */
    public function setResponseStatus(?int $responseStatus): self
    {
        $this->initialized['responseStatus'] = true;
        $this->responseStatus = $responseStatus;

        return $this;
    }

    /**
     * An internal error reflecting what went wrong.
     */
    public function getError(): ?string
    {
        return $this->error;
    }

    /**
     * An internal error reflecting what went wrong.
     */
    public function setError(?string $error): self
    {
        $this->initialized['error'] = true;
        $this->error = $error;

        return $this;
    }
}
