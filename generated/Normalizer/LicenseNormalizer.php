<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Normalizer;

use cedricziel\phpbaserowclient\Generated\Runtime\Normalizer\CheckArray;
use cedricziel\phpbaserowclient\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class LicenseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \cedricziel\phpbaserowclient\Generated\Model\License::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \cedricziel\phpbaserowclient\Generated\Model\License::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \cedricziel\phpbaserowclient\Generated\Model\License();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('license_id', $data)) {
                $object->setLicenseId($data['license_id']);
                unset($data['license_id']);
            }
            if (\array_key_exists('is_active', $data)) {
                $object->setIsActive($data['is_active']);
                unset($data['is_active']);
            }
            if (\array_key_exists('last_check', $data) && null !== $data['last_check']) {
                $object->setLastCheck(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['last_check']));
                unset($data['last_check']);
            } elseif (\array_key_exists('last_check', $data) && null === $data['last_check']) {
                $object->setLastCheck(null);
            }
            if (\array_key_exists('valid_from', $data)) {
                $object->setValidFrom(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['valid_from']));
                unset($data['valid_from']);
            }
            if (\array_key_exists('valid_through', $data)) {
                $object->setValidThrough(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['valid_through']));
                unset($data['valid_through']);
            }
            if (\array_key_exists('free_users_count', $data)) {
                $object->setFreeUsersCount($data['free_users_count']);
                unset($data['free_users_count']);
            }
            if (\array_key_exists('seats_taken', $data)) {
                $object->setSeatsTaken($data['seats_taken']);
                unset($data['seats_taken']);
            }
            if (\array_key_exists('seats', $data)) {
                $object->setSeats($data['seats']);
                unset($data['seats']);
            }
            if (\array_key_exists('product_code', $data)) {
                $object->setProductCode($data['product_code']);
                unset($data['product_code']);
            }
            if (\array_key_exists('issued_on', $data)) {
                $object->setIssuedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['issued_on']));
                unset($data['issued_on']);
            }
            if (\array_key_exists('issued_to_email', $data)) {
                $object->setIssuedToEmail($data['issued_to_email']);
                unset($data['issued_to_email']);
            }
            if (\array_key_exists('issued_to_name', $data)) {
                $object->setIssuedToName($data['issued_to_name']);
                unset($data['issued_to_name']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['license_id'] = $object->getLicenseId();
            $data['is_active'] = $object->getIsActive();
            if ($object->isInitialized('lastCheck') && null !== $object->getLastCheck()) {
                $data['last_check'] = $object->getLastCheck()->format('Y-m-d\TH:i:sP');
            }
            $data['valid_from'] = $object->getValidFrom()?->format('Y-m-d\TH:i:sP');
            $data['valid_through'] = $object->getValidThrough()?->format('Y-m-d\TH:i:sP');
            $data['seats'] = $object->getSeats();
            $data['product_code'] = $object->getProductCode();
            $data['issued_on'] = $object->getIssuedOn()?->format('Y-m-d\TH:i:sP');
            $data['issued_to_email'] = $object->getIssuedToEmail();
            $data['issued_to_name'] = $object->getIssuedToName();
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\cedricziel\phpbaserowclient\Generated\Model\License::class => false];
        }
    }
} else {
    class LicenseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \cedricziel\phpbaserowclient\Generated\Model\License::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \cedricziel\phpbaserowclient\Generated\Model\License::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \cedricziel\phpbaserowclient\Generated\Model\License();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('license_id', $data)) {
                $object->setLicenseId($data['license_id']);
                unset($data['license_id']);
            }
            if (\array_key_exists('is_active', $data)) {
                $object->setIsActive($data['is_active']);
                unset($data['is_active']);
            }
            if (\array_key_exists('last_check', $data) && null !== $data['last_check']) {
                $object->setLastCheck(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['last_check']));
                unset($data['last_check']);
            } elseif (\array_key_exists('last_check', $data) && null === $data['last_check']) {
                $object->setLastCheck(null);
            }
            if (\array_key_exists('valid_from', $data)) {
                $object->setValidFrom(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['valid_from']));
                unset($data['valid_from']);
            }
            if (\array_key_exists('valid_through', $data)) {
                $object->setValidThrough(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['valid_through']));
                unset($data['valid_through']);
            }
            if (\array_key_exists('free_users_count', $data)) {
                $object->setFreeUsersCount($data['free_users_count']);
                unset($data['free_users_count']);
            }
            if (\array_key_exists('seats_taken', $data)) {
                $object->setSeatsTaken($data['seats_taken']);
                unset($data['seats_taken']);
            }
            if (\array_key_exists('seats', $data)) {
                $object->setSeats($data['seats']);
                unset($data['seats']);
            }
            if (\array_key_exists('product_code', $data)) {
                $object->setProductCode($data['product_code']);
                unset($data['product_code']);
            }
            if (\array_key_exists('issued_on', $data)) {
                $object->setIssuedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['issued_on']));
                unset($data['issued_on']);
            }
            if (\array_key_exists('issued_to_email', $data)) {
                $object->setIssuedToEmail($data['issued_to_email']);
                unset($data['issued_to_email']);
            }
            if (\array_key_exists('issued_to_name', $data)) {
                $object->setIssuedToName($data['issued_to_name']);
                unset($data['issued_to_name']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['license_id'] = $object->getLicenseId();
            $data['is_active'] = $object->getIsActive();
            if ($object->isInitialized('lastCheck') && null !== $object->getLastCheck()) {
                $data['last_check'] = $object->getLastCheck()->format('Y-m-d\TH:i:sP');
            }
            $data['valid_from'] = $object->getValidFrom()?->format('Y-m-d\TH:i:sP');
            $data['valid_through'] = $object->getValidThrough()?->format('Y-m-d\TH:i:sP');
            $data['seats'] = $object->getSeats();
            $data['product_code'] = $object->getProductCode();
            $data['issued_on'] = $object->getIssuedOn()?->format('Y-m-d\TH:i:sP');
            $data['issued_to_email'] = $object->getIssuedToEmail();
            $data['issued_to_name'] = $object->getIssuedToName();
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\cedricziel\phpbaserowclient\Generated\Model\License::class => false];
        }
    }
}
