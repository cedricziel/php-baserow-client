<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Normalizer;

use CedricZiel\Baserow\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\Baserow\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class LocalBaserowListRowsPublicDataSourceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource();
            if (\array_key_exists('order', $data) && \is_int($data['order'])) {
                $data['order'] = (float) $data['order'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('type', $data)) {
                $object->setType($data['type']);
                unset($data['type']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('page_id', $data)) {
                $object->setPageId($data['page_id']);
                unset($data['page_id']);
            }
            if (\array_key_exists('order', $data)) {
                $object->setOrder($data['order']);
                unset($data['order']);
            }
            if (\array_key_exists('context_data', $data)) {
                $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data['context_data'] as $key => $value) {
                    $values[$key] = $value;
                }
                $object->setContextData($values);
                unset($data['context_data']);
            }
            if (\array_key_exists('table_id', $data) && null !== $data['table_id']) {
                $object->setTableId($data['table_id']);
                unset($data['table_id']);
            } elseif (\array_key_exists('table_id', $data) && null === $data['table_id']) {
                $object->setTableId(null);
            }
            if (\array_key_exists('view_id', $data) && null !== $data['view_id']) {
                $object->setViewId($data['view_id']);
                unset($data['view_id']);
            } elseif (\array_key_exists('view_id', $data) && null === $data['view_id']) {
                $object->setViewId(null);
            }
            if (\array_key_exists('filter_type', $data)) {
                $object->setFilterType($data['filter_type']);
                unset($data['filter_type']);
            }
            if (\array_key_exists('search_query', $data)) {
                $object->setSearchQuery($data['search_query']);
                unset($data['search_query']);
            }
            if (\array_key_exists('sortings', $data)) {
                $values_1 = [];
                foreach ($data['sortings'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CedricZiel\Baserow\Generated\Model\LocalBaserowTableServiceSort::class, 'json', $context);
                }
                $object->setSortings($values_1);
                unset($data['sortings']);
            }
            if (\array_key_exists('filters', $data)) {
                $values_2 = [];
                foreach ($data['filters'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, \CedricZiel\Baserow\Generated\Model\LocalBaserowTableServiceFilter::class, 'json', $context);
                }
                $object->setFilters($values_2);
                unset($data['filters']);
            }
            foreach ($data as $key_1 => $value_3) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $object[$key_1] = $value_3;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('filterType') && null !== $object->getFilterType()) {
                $data['filter_type'] = $object->getFilterType();
            }
            if ($object->isInitialized('searchQuery') && null !== $object->getSearchQuery()) {
                $data['search_query'] = $object->getSearchQuery();
            }
            if ($object->isInitialized('sortings') && null !== $object->getSortings()) {
                $values = [];
                foreach ($object->getSortings() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['sortings'] = $values;
            }
            if ($object->isInitialized('filters') && null !== $object->getFilters()) {
                $values_1 = [];
                foreach ($object->getFilters() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['filters'] = $values_1;
            }
            foreach ($object as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource::class => false];
        }
    }
} else {
    class LocalBaserowListRowsPublicDataSourceNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource();
            if (\array_key_exists('order', $data) && \is_int($data['order'])) {
                $data['order'] = (float) $data['order'];
            }
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('type', $data)) {
                $object->setType($data['type']);
                unset($data['type']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('page_id', $data)) {
                $object->setPageId($data['page_id']);
                unset($data['page_id']);
            }
            if (\array_key_exists('order', $data)) {
                $object->setOrder($data['order']);
                unset($data['order']);
            }
            if (\array_key_exists('context_data', $data)) {
                $values = new \ArrayObject([], \ArrayObject::ARRAY_AS_PROPS);
                foreach ($data['context_data'] as $key => $value) {
                    $values[$key] = $value;
                }
                $object->setContextData($values);
                unset($data['context_data']);
            }
            if (\array_key_exists('table_id', $data) && null !== $data['table_id']) {
                $object->setTableId($data['table_id']);
                unset($data['table_id']);
            } elseif (\array_key_exists('table_id', $data) && null === $data['table_id']) {
                $object->setTableId(null);
            }
            if (\array_key_exists('view_id', $data) && null !== $data['view_id']) {
                $object->setViewId($data['view_id']);
                unset($data['view_id']);
            } elseif (\array_key_exists('view_id', $data) && null === $data['view_id']) {
                $object->setViewId(null);
            }
            if (\array_key_exists('filter_type', $data)) {
                $object->setFilterType($data['filter_type']);
                unset($data['filter_type']);
            }
            if (\array_key_exists('search_query', $data)) {
                $object->setSearchQuery($data['search_query']);
                unset($data['search_query']);
            }
            if (\array_key_exists('sortings', $data)) {
                $values_1 = [];
                foreach ($data['sortings'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CedricZiel\Baserow\Generated\Model\LocalBaserowTableServiceSort::class, 'json', $context);
                }
                $object->setSortings($values_1);
                unset($data['sortings']);
            }
            if (\array_key_exists('filters', $data)) {
                $values_2 = [];
                foreach ($data['filters'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, \CedricZiel\Baserow\Generated\Model\LocalBaserowTableServiceFilter::class, 'json', $context);
                }
                $object->setFilters($values_2);
                unset($data['filters']);
            }
            foreach ($data as $key_1 => $value_3) {
                if (preg_match('/.*/', (string) $key_1)) {
                    $object[$key_1] = $value_3;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('filterType') && null !== $object->getFilterType()) {
                $data['filter_type'] = $object->getFilterType();
            }
            if ($object->isInitialized('searchQuery') && null !== $object->getSearchQuery()) {
                $data['search_query'] = $object->getSearchQuery();
            }
            if ($object->isInitialized('sortings') && null !== $object->getSortings()) {
                $values = [];
                foreach ($object->getSortings() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['sortings'] = $values;
            }
            if ($object->isInitialized('filters') && null !== $object->getFilters()) {
                $values_1 = [];
                foreach ($object->getFilters() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['filters'] = $values_1;
            }
            foreach ($object as $key => $value_2) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_2;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\LocalBaserowListRowsPublicDataSource::class => false];
        }
    }
}
