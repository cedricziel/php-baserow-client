<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Normalizer;

use CedricZiel\Baserow\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\Baserow\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class PublicFormViewFieldOptionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('description', $data)) {
                $object->setDescription($data['description']);
                unset($data['description']);
            }
            if (\array_key_exists('required', $data)) {
                $object->setRequired($data['required']);
                unset($data['required']);
            }
            if (\array_key_exists('order', $data)) {
                $object->setOrder($data['order']);
                unset($data['order']);
            }
            if (\array_key_exists('field', $data)) {
                $object->setField($this->denormalizer->denormalize($data['field'], \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptionsField::class, 'json', $context));
                unset($data['field']);
            }
            if (\array_key_exists('show_when_matching_conditions', $data)) {
                $object->setShowWhenMatchingConditions($data['show_when_matching_conditions']);
                unset($data['show_when_matching_conditions']);
            }
            if (\array_key_exists('condition_type', $data)) {
                $object->setConditionType($data['condition_type']);
                unset($data['condition_type']);
            }
            if (\array_key_exists('conditions', $data)) {
                $values = [];
                foreach ($data['conditions'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CedricZiel\Baserow\Generated\Model\FormViewFieldOptionsCondition::class, 'json', $context);
                }
                $object->setConditions($values);
                unset($data['conditions']);
            }
            if (\array_key_exists('condition_groups', $data)) {
                $values_1 = [];
                foreach ($data['condition_groups'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CedricZiel\Baserow\Generated\Model\FormViewFieldOptionsConditionGroup::class, 'json', $context);
                }
                $object->setConditionGroups($values_1);
                unset($data['condition_groups']);
            }
            if (\array_key_exists('groups', $data)) {
                $values_2 = [];
                foreach ($data['groups'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, \CedricZiel\Baserow\Generated\Model\FormViewFieldOptionsConditionGroup::class, 'json', $context);
                }
                $object->setGroups($values_2);
                unset($data['groups']);
            }
            if (\array_key_exists('field_component', $data)) {
                $object->setFieldComponent($data['field_component']);
                unset($data['field_component']);
            }
            foreach ($data as $key => $value_3) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_3;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('required') && null !== $object->getRequired()) {
                $data['required'] = $object->getRequired();
            }
            if ($object->isInitialized('order') && null !== $object->getOrder()) {
                $data['order'] = $object->getOrder();
            }
            if ($object->isInitialized('showWhenMatchingConditions') && null !== $object->getShowWhenMatchingConditions()) {
                $data['show_when_matching_conditions'] = $object->getShowWhenMatchingConditions();
            }
            if ($object->isInitialized('conditionType') && null !== $object->getConditionType()) {
                $data['condition_type'] = $object->getConditionType();
            }
            if ($object->isInitialized('conditions') && null !== $object->getConditions()) {
                $values = [];
                foreach ($object->getConditions() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['conditions'] = $values;
            }
            if ($object->isInitialized('conditionGroups') && null !== $object->getConditionGroups()) {
                $values_1 = [];
                foreach ($object->getConditionGroups() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['condition_groups'] = $values_1;
            }
            if ($object->isInitialized('groups') && null !== $object->getGroups()) {
                $values_2 = [];
                foreach ($object->getGroups() as $value_2) {
                    $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
                }
                $data['groups'] = $values_2;
            }
            if ($object->isInitialized('fieldComponent') && null !== $object->getFieldComponent()) {
                $data['field_component'] = $object->getFieldComponent();
            }
            foreach ($object as $key => $value_3) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_3;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions::class => false];
        }
    }
} else {
    class PublicFormViewFieldOptionsNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('description', $data)) {
                $object->setDescription($data['description']);
                unset($data['description']);
            }
            if (\array_key_exists('required', $data)) {
                $object->setRequired($data['required']);
                unset($data['required']);
            }
            if (\array_key_exists('order', $data)) {
                $object->setOrder($data['order']);
                unset($data['order']);
            }
            if (\array_key_exists('field', $data)) {
                $object->setField($this->denormalizer->denormalize($data['field'], \CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptionsField::class, 'json', $context));
                unset($data['field']);
            }
            if (\array_key_exists('show_when_matching_conditions', $data)) {
                $object->setShowWhenMatchingConditions($data['show_when_matching_conditions']);
                unset($data['show_when_matching_conditions']);
            }
            if (\array_key_exists('condition_type', $data)) {
                $object->setConditionType($data['condition_type']);
                unset($data['condition_type']);
            }
            if (\array_key_exists('conditions', $data)) {
                $values = [];
                foreach ($data['conditions'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CedricZiel\Baserow\Generated\Model\FormViewFieldOptionsCondition::class, 'json', $context);
                }
                $object->setConditions($values);
                unset($data['conditions']);
            }
            if (\array_key_exists('condition_groups', $data)) {
                $values_1 = [];
                foreach ($data['condition_groups'] as $value_1) {
                    $values_1[] = $this->denormalizer->denormalize($value_1, \CedricZiel\Baserow\Generated\Model\FormViewFieldOptionsConditionGroup::class, 'json', $context);
                }
                $object->setConditionGroups($values_1);
                unset($data['condition_groups']);
            }
            if (\array_key_exists('groups', $data)) {
                $values_2 = [];
                foreach ($data['groups'] as $value_2) {
                    $values_2[] = $this->denormalizer->denormalize($value_2, \CedricZiel\Baserow\Generated\Model\FormViewFieldOptionsConditionGroup::class, 'json', $context);
                }
                $object->setGroups($values_2);
                unset($data['groups']);
            }
            if (\array_key_exists('field_component', $data)) {
                $object->setFieldComponent($data['field_component']);
                unset($data['field_component']);
            }
            foreach ($data as $key => $value_3) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_3;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            if ($object->isInitialized('description') && null !== $object->getDescription()) {
                $data['description'] = $object->getDescription();
            }
            if ($object->isInitialized('required') && null !== $object->getRequired()) {
                $data['required'] = $object->getRequired();
            }
            if ($object->isInitialized('order') && null !== $object->getOrder()) {
                $data['order'] = $object->getOrder();
            }
            if ($object->isInitialized('showWhenMatchingConditions') && null !== $object->getShowWhenMatchingConditions()) {
                $data['show_when_matching_conditions'] = $object->getShowWhenMatchingConditions();
            }
            if ($object->isInitialized('conditionType') && null !== $object->getConditionType()) {
                $data['condition_type'] = $object->getConditionType();
            }
            if ($object->isInitialized('conditions') && null !== $object->getConditions()) {
                $values = [];
                foreach ($object->getConditions() as $value) {
                    $values[] = $this->normalizer->normalize($value, 'json', $context);
                }
                $data['conditions'] = $values;
            }
            if ($object->isInitialized('conditionGroups') && null !== $object->getConditionGroups()) {
                $values_1 = [];
                foreach ($object->getConditionGroups() as $value_1) {
                    $values_1[] = $this->normalizer->normalize($value_1, 'json', $context);
                }
                $data['condition_groups'] = $values_1;
            }
            if ($object->isInitialized('groups') && null !== $object->getGroups()) {
                $values_2 = [];
                foreach ($object->getGroups() as $value_2) {
                    $values_2[] = $this->normalizer->normalize($value_2, 'json', $context);
                }
                $data['groups'] = $values_2;
            }
            if ($object->isInitialized('fieldComponent') && null !== $object->getFieldComponent()) {
                $data['field_component'] = $object->getFieldComponent();
            }
            foreach ($object as $key => $value_3) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_3;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\PublicFormViewFieldOptions::class => false];
        }
    }
}
