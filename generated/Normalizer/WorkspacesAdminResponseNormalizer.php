<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Normalizer;

use CedricZiel\Baserow\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\Baserow\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class WorkspacesAdminResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('users', $data)) {
                $values = [];
                foreach ($data['users'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CedricZiel\Baserow\Generated\Model\WorkspaceAdminUsers::class, 'json', $context);
                }
                $object->setUsers($values);
                unset($data['users']);
            }
            if (\array_key_exists('application_count', $data)) {
                $object->setApplicationCount($data['application_count']);
                unset($data['application_count']);
            }
            if (\array_key_exists('row_count', $data)) {
                $object->setRowCount($data['row_count']);
                unset($data['row_count']);
            }
            if (\array_key_exists('storage_usage', $data) && null !== $data['storage_usage']) {
                $object->setStorageUsage($data['storage_usage']);
                unset($data['storage_usage']);
            } elseif (\array_key_exists('storage_usage', $data) && null === $data['storage_usage']) {
                $object->setStorageUsage(null);
            }
            if (\array_key_exists('seats_taken', $data)) {
                $object->setSeatsTaken($data['seats_taken']);
                unset($data['seats_taken']);
            }
            if (\array_key_exists('free_users', $data)) {
                $object->setFreeUsers($data['free_users']);
                unset($data['free_users']);
            }
            if (\array_key_exists('created_on', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['created_on']));
                unset($data['created_on']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['name'] = $object->getName();
            $values = [];
            foreach ($object->getUsers() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['users'] = $values;
            $data['application_count'] = $object->getApplicationCount();
            if ($object->isInitialized('storageUsage') && null !== $object->getStorageUsage()) {
                $data['storage_usage'] = $object->getStorageUsage();
            }
            $data['seats_taken'] = $object->getSeatsTaken();
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse::class => false];
        }
    }
} else {
    class WorkspacesAdminResponseNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('id', $data)) {
                $object->setId($data['id']);
                unset($data['id']);
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('users', $data)) {
                $values = [];
                foreach ($data['users'] as $value) {
                    $values[] = $this->denormalizer->denormalize($value, \CedricZiel\Baserow\Generated\Model\WorkspaceAdminUsers::class, 'json', $context);
                }
                $object->setUsers($values);
                unset($data['users']);
            }
            if (\array_key_exists('application_count', $data)) {
                $object->setApplicationCount($data['application_count']);
                unset($data['application_count']);
            }
            if (\array_key_exists('row_count', $data)) {
                $object->setRowCount($data['row_count']);
                unset($data['row_count']);
            }
            if (\array_key_exists('storage_usage', $data) && null !== $data['storage_usage']) {
                $object->setStorageUsage($data['storage_usage']);
                unset($data['storage_usage']);
            } elseif (\array_key_exists('storage_usage', $data) && null === $data['storage_usage']) {
                $object->setStorageUsage(null);
            }
            if (\array_key_exists('seats_taken', $data)) {
                $object->setSeatsTaken($data['seats_taken']);
                unset($data['seats_taken']);
            }
            if (\array_key_exists('free_users', $data)) {
                $object->setFreeUsers($data['free_users']);
                unset($data['free_users']);
            }
            if (\array_key_exists('created_on', $data)) {
                $object->setCreatedOn(\DateTime::createFromFormat('Y-m-d\TH:i:sP', $data['created_on']));
                unset($data['created_on']);
            }
            foreach ($data as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value_1;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['name'] = $object->getName();
            $values = [];
            foreach ($object->getUsers() as $value) {
                $values[] = $this->normalizer->normalize($value, 'json', $context);
            }
            $data['users'] = $values;
            $data['application_count'] = $object->getApplicationCount();
            if ($object->isInitialized('storageUsage') && null !== $object->getStorageUsage()) {
                $data['storage_usage'] = $object->getStorageUsage();
            }
            $data['seats_taken'] = $object->getSeatsTaken();
            foreach ($object as $key => $value_1) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value_1;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\WorkspacesAdminResponse::class => false];
        }
    }
}
