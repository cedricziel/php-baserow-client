<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace CedricZiel\Baserow\Generated\Normalizer;

use CedricZiel\Baserow\Generated\Runtime\Normalizer\CheckArray;
use CedricZiel\Baserow\Generated\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\HttpKernel\Kernel;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

if (!class_exists(Kernel::class) or (Kernel::MAJOR_VERSION >= 7 or Kernel::MAJOR_VERSION === 6 and Kernel::MINOR_VERSION === 4)) {
    class RegisterNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\Register::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\Register::class === get_class($data);
        }

        public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\Register();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('email', $data)) {
                $object->setEmail($data['email']);
                unset($data['email']);
            }
            if (\array_key_exists('password', $data)) {
                $object->setPassword($data['password']);
                unset($data['password']);
            }
            if (\array_key_exists('language', $data)) {
                $object->setLanguage($data['language']);
                unset($data['language']);
            }
            if (\array_key_exists('authenticate', $data)) {
                $object->setAuthenticate($data['authenticate']);
                unset($data['authenticate']);
            }
            if (\array_key_exists('group_invitation_token', $data)) {
                $object->setGroupInvitationToken($data['group_invitation_token']);
                unset($data['group_invitation_token']);
            }
            if (\array_key_exists('workspace_invitation_token', $data)) {
                $object->setWorkspaceInvitationToken($data['workspace_invitation_token']);
                unset($data['workspace_invitation_token']);
            }
            if (\array_key_exists('template_id', $data)) {
                $object->setTemplateId($data['template_id']);
                unset($data['template_id']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        public function normalize(mixed $object, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
        {
            $data = [];
            $data['name'] = $object->getName();
            $data['email'] = $object->getEmail();
            $data['password'] = $object->getPassword();
            if ($object->isInitialized('language') && null !== $object->getLanguage()) {
                $data['language'] = $object->getLanguage();
            }
            if ($object->isInitialized('authenticate') && null !== $object->getAuthenticate()) {
                $data['authenticate'] = $object->getAuthenticate();
            }
            if ($object->isInitialized('groupInvitationToken') && null !== $object->getGroupInvitationToken()) {
                $data['group_invitation_token'] = $object->getGroupInvitationToken();
            }
            if ($object->isInitialized('workspaceInvitationToken') && null !== $object->getWorkspaceInvitationToken()) {
                $data['workspace_invitation_token'] = $object->getWorkspaceInvitationToken();
            }
            if ($object->isInitialized('templateId') && null !== $object->getTemplateId()) {
                $data['template_id'] = $object->getTemplateId();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\Register::class => false];
        }
    }
} else {
    class RegisterNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
    {
        use DenormalizerAwareTrait;
        use NormalizerAwareTrait;
        use CheckArray;
        use ValidatorTrait;

        public function supportsDenormalization($data, $type, ?string $format = null, array $context = []): bool
        {
            return \CedricZiel\Baserow\Generated\Model\Register::class === $type;
        }

        public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
        {
            return is_object($data) && \CedricZiel\Baserow\Generated\Model\Register::class === get_class($data);
        }

        public function denormalize($data, $type, $format = null, array $context = [])
        {
            if (isset($data['$ref'])) {
                return new Reference($data['$ref'], $context['document-origin']);
            }
            if (isset($data['$recursiveRef'])) {
                return new Reference($data['$recursiveRef'], $context['document-origin']);
            }
            $object = new \CedricZiel\Baserow\Generated\Model\Register();
            if (null === $data || false === \is_array($data)) {
                return $object;
            }
            if (\array_key_exists('name', $data)) {
                $object->setName($data['name']);
                unset($data['name']);
            }
            if (\array_key_exists('email', $data)) {
                $object->setEmail($data['email']);
                unset($data['email']);
            }
            if (\array_key_exists('password', $data)) {
                $object->setPassword($data['password']);
                unset($data['password']);
            }
            if (\array_key_exists('language', $data)) {
                $object->setLanguage($data['language']);
                unset($data['language']);
            }
            if (\array_key_exists('authenticate', $data)) {
                $object->setAuthenticate($data['authenticate']);
                unset($data['authenticate']);
            }
            if (\array_key_exists('group_invitation_token', $data)) {
                $object->setGroupInvitationToken($data['group_invitation_token']);
                unset($data['group_invitation_token']);
            }
            if (\array_key_exists('workspace_invitation_token', $data)) {
                $object->setWorkspaceInvitationToken($data['workspace_invitation_token']);
                unset($data['workspace_invitation_token']);
            }
            if (\array_key_exists('template_id', $data)) {
                $object->setTemplateId($data['template_id']);
                unset($data['template_id']);
            }
            foreach ($data as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $object[$key] = $value;
                }
            }

            return $object;
        }

        /**
         * @return array|string|int|float|bool|\ArrayObject|null
         */
        public function normalize($object, $format = null, array $context = [])
        {
            $data = [];
            $data['name'] = $object->getName();
            $data['email'] = $object->getEmail();
            $data['password'] = $object->getPassword();
            if ($object->isInitialized('language') && null !== $object->getLanguage()) {
                $data['language'] = $object->getLanguage();
            }
            if ($object->isInitialized('authenticate') && null !== $object->getAuthenticate()) {
                $data['authenticate'] = $object->getAuthenticate();
            }
            if ($object->isInitialized('groupInvitationToken') && null !== $object->getGroupInvitationToken()) {
                $data['group_invitation_token'] = $object->getGroupInvitationToken();
            }
            if ($object->isInitialized('workspaceInvitationToken') && null !== $object->getWorkspaceInvitationToken()) {
                $data['workspace_invitation_token'] = $object->getWorkspaceInvitationToken();
            }
            if ($object->isInitialized('templateId') && null !== $object->getTemplateId()) {
                $data['template_id'] = $object->getTemplateId();
            }
            foreach ($object as $key => $value) {
                if (preg_match('/.*/', (string) $key)) {
                    $data[$key] = $value;
                }
            }

            return $data;
        }

        public function getSupportedTypes(?string $format = null): array
        {
            return [\CedricZiel\Baserow\Generated\Model\Register::class => false];
        }
    }
}
