<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Endpoint;

class OauthProviderLoginRedirect extends \cedricziel\phpbaserowclient\Generated\Runtime\Client\BaseEndpoint implements \cedricziel\phpbaserowclient\Generated\Runtime\Client\Endpoint
{
    use \cedricziel\phpbaserowclient\Generated\Runtime\Client\EndpointTrait;
    protected $provider_id;

    /**
     * Redirects to the OAuth2 provider's authentication URL based on the provided auth provider's id.
     *
     * @param int   $providerId      the id of the provider for redirect
     * @param array $queryParameters {
     *
     * @var string $group_invitation_token please use the functionally identical `workspace_invitation_token` instead as this querystring is being removed in the future
     * @var int    $original the relative part of URL that the user wanted to access
     * @var string $workspace_invitation_token The invitation token sent to the user to join a specific workspace.
     *             }
     */
    public function __construct(int $providerId, array $queryParameters = [])
    {
        $this->provider_id = $providerId;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{provider_id}'], [$this->provider_id], '/api/sso/oauth2/login/{provider_id}/');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['group_invitation_token', 'original', 'workspace_invitation_token']);
        $optionsResolver->setRequired([]);
        $optionsResolver->setDefaults([]);
        $optionsResolver->addAllowedTypes('group_invitation_token', ['string']);
        $optionsResolver->addAllowedTypes('original', ['int']);
        $optionsResolver->addAllowedTypes('workspace_invitation_token', ['string']);

        return $optionsResolver;
    }

    /**
     * @return null
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (302 === $status) {
            return null;
        }
    }

    public function getAuthenticationScopes(): array
    {
        return [];
    }
}
