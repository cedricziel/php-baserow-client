<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Endpoint;

class PublicListDatabaseTableCalendarViewRows extends \cedricziel\phpbaserowclient\Generated\Runtime\Client\BaseEndpoint implements \cedricziel\phpbaserowclient\Generated\Runtime\Client\Endpoint
{
    use \cedricziel\phpbaserowclient\Generated\Runtime\Client\EndpointTrait;
    protected $slug;

    /**
     * Responds with serialized rows grouped by the view's date field options related to the `slug` if the calendar view is publicly shared. Additional query parameters can be provided to control the `limit` and `offset` per select option.
     *
     * This is a **premium** feature.
     *
     * @param string $slug            returns only rows that belong to the related view
     * @param array  $queryParameters {
     *
     * @var string $from_timestamp restricts results based on the calendar date field
     * @var int    $limit Defines how many rows should be returned by default. This value can be overwritten per select option.
     * @var int    $offset Defines from which offset the rows should be returned.This value can be overwritten per select option.
     * @var string $to_timestamp restricts results based on the calendar date field
     * @var string $user_timezone User's timezone will be taken into account for date fieldtypes that have a time and don't enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     *             }
     */
    public function __construct(string $slug, array $queryParameters = [])
    {
        $this->slug = $slug;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{slug}'], [$this->slug], '/api/database/views/calendar/{slug}/public/rows/');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['from_timestamp', 'limit', 'offset', 'to_timestamp', 'user_timezone']);
        $optionsResolver->setRequired(['from_timestamp', 'to_timestamp']);
        $optionsResolver->setDefaults(['user_timezone' => 'UTC']);
        $optionsResolver->addAllowedTypes('from_timestamp', ['string']);
        $optionsResolver->addAllowedTypes('limit', ['int']);
        $optionsResolver->addAllowedTypes('offset', ['int']);
        $optionsResolver->addAllowedTypes('to_timestamp', ['string']);
        $optionsResolver->addAllowedTypes('user_timezone', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \cedricziel\phpbaserowclient\Generated\Model\CalendarViewExampleResponse|null
     *
     * @throws \cedricziel\phpbaserowclient\Generated\Exception\PublicListDatabaseTableCalendarViewRowsUnauthorizedException
     * @throws \cedricziel\phpbaserowclient\Generated\Exception\PublicListDatabaseTableCalendarViewRowsBadRequestException
     * @throws \cedricziel\phpbaserowclient\Generated\Exception\PublicListDatabaseTableCalendarViewRowsNotFoundException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (false === is_null($contentType) && (200 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            return $serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\CalendarViewExampleResponse', 'json');
        }
        if (false === is_null($contentType) && (401 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            throw new \cedricziel\phpbaserowclient\Generated\Exception\PublicListDatabaseTableCalendarViewRowsUnauthorizedException($serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\ApiDatabaseViewsCalendarSlugPublicRowsGetResponse401', 'json'), $response);
        }
        if (false === is_null($contentType) && (400 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            throw new \cedricziel\phpbaserowclient\Generated\Exception\PublicListDatabaseTableCalendarViewRowsBadRequestException($serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\ApiDatabaseViewsCalendarSlugPublicRowsGetResponse400', 'json'), $response);
        }
        if (false === is_null($contentType) && (404 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            throw new \cedricziel\phpbaserowclient\Generated\Exception\PublicListDatabaseTableCalendarViewRowsNotFoundException($serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\ApiDatabaseViewsCalendarSlugPublicRowsGetResponse404', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['JWT'];
    }
}
