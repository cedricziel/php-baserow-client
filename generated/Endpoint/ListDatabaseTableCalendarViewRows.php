<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace cedricziel\phpbaserowclient\Generated\Endpoint;

class ListDatabaseTableCalendarViewRows extends \cedricziel\phpbaserowclient\Generated\Runtime\Client\BaseEndpoint implements \cedricziel\phpbaserowclient\Generated\Runtime\Client\Endpoint
{
    use \cedricziel\phpbaserowclient\Generated\Runtime\Client\EndpointTrait;
    protected $view_id;

    /**
     * Responds with serialized rows grouped by date regarding view's date fieldif the user is authenticated and has access to the related workspace.
     *
     * This is a **premium** feature.
     *
     * @param int   $viewId          returns only rows that belong to the related view's table
     * @param array $queryParameters {
     *
     * @var string $from_timestamp restricts results based on the calendar date field
     * @var string $include A comma separated list allowing the values of `field_options` and `row_metadata` which will add the object/objects with the same name to the response if included. The `field_options` object contains user defined view settings for each field. For example the field's width is included in here. The `row_metadata` object includes extra row specific data on a per row basis.
     * @var int    $limit defines how many rows should be returned by default
     * @var int    $offset defines from which offset the rows should be returned
     * @var string $search if provided only rows with data that matches the search query are going to be returned
     * @var string $search_mode If provided, allows API consumers to determine what kind of search experience they wish to have. If the default `SearchModes.MODE_FT_WITH_COUNT` is used, then Postgres full-text search is used. If `SearchModes.MODE_COMPAT` is provided then the search term will be exactly searched for including whitespace on each cell. This is the Baserow legacy search behaviour.
     * @var string $to_timestamp restricts results based on the calendar date field
     * @var string $user_timezone User's timezone will be taken into account for date fieldtypes that have a time and don't enforce a timezone. The timezone will be used for aggregating the dates. For date fields without a time this will be ignored and UTC will be forced.
     *             }
     */
    public function __construct(int $viewId, array $queryParameters = [])
    {
        $this->view_id = $viewId;
        $this->queryParameters = $queryParameters;
    }

    public function getMethod(): string
    {
        return 'GET';
    }

    public function getUri(): string
    {
        return str_replace(['{view_id}'], [$this->view_id], '/api/database/views/calendar/{view_id}/');
    }

    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null): array
    {
        return [[], null];
    }

    public function getExtraHeaders(): array
    {
        return ['Accept' => ['application/json']];
    }

    protected function getQueryOptionsResolver(): \Symfony\Component\OptionsResolver\OptionsResolver
    {
        $optionsResolver = parent::getQueryOptionsResolver();
        $optionsResolver->setDefined(['from_timestamp', 'include', 'limit', 'offset', 'search', 'search_mode', 'to_timestamp', 'user_timezone']);
        $optionsResolver->setRequired(['from_timestamp', 'to_timestamp']);
        $optionsResolver->setDefaults(['offset' => 0, 'user_timezone' => 'UTC']);
        $optionsResolver->addAllowedTypes('from_timestamp', ['string']);
        $optionsResolver->addAllowedTypes('include', ['string']);
        $optionsResolver->addAllowedTypes('limit', ['int']);
        $optionsResolver->addAllowedTypes('offset', ['int']);
        $optionsResolver->addAllowedTypes('search', ['string']);
        $optionsResolver->addAllowedTypes('search_mode', ['string']);
        $optionsResolver->addAllowedTypes('to_timestamp', ['string']);
        $optionsResolver->addAllowedTypes('user_timezone', ['string']);

        return $optionsResolver;
    }

    /**
     * @return \cedricziel\phpbaserowclient\Generated\Model\CalendarViewExampleResponse|null
     *
     * @throws \cedricziel\phpbaserowclient\Generated\Exception\ListDatabaseTableCalendarViewRowsBadRequestException
     * @throws \cedricziel\phpbaserowclient\Generated\Exception\ListDatabaseTableCalendarViewRowsNotFoundException
     */
    protected function transformResponseBody(\Psr\Http\Message\ResponseInterface $response, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        $status = $response->getStatusCode();
        $body = (string) $response->getBody();
        if (false === is_null($contentType) && (200 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            return $serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\CalendarViewExampleResponse', 'json');
        }
        if (false === is_null($contentType) && (400 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            throw new \cedricziel\phpbaserowclient\Generated\Exception\ListDatabaseTableCalendarViewRowsBadRequestException($serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\ApiDatabaseViewsCalendarViewIdGetResponse400', 'json'), $response);
        }
        if (false === is_null($contentType) && (404 === $status && false !== mb_strpos($contentType, 'application/json'))) {
            throw new \cedricziel\phpbaserowclient\Generated\Exception\ListDatabaseTableCalendarViewRowsNotFoundException($serializer->deserialize($body, 'cedricziel\phpbaserowclient\Generated\Model\ApiDatabaseViewsCalendarViewIdGetResponse404', 'json'), $response);
        }
    }

    public function getAuthenticationScopes(): array
    {
        return ['JWT'];
    }
}
